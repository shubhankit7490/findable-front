/**
 * Findable API
 * Findable Restful API Location services
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Inject, Injectable, Optional } from "@angular/core";
import { Http, Headers, URLSearchParams } from "@angular/http";
import {
  RequestMethod,
  RequestOptions,
  RequestOptionsArgs
} from "@angular/http";
import { Response, ResponseContentType } from "@angular/http";

import { Observable } from "rxjs/Observable";
import "rxjs/add/operator/map";

import * as models from "../model/models";
import { environment } from "environments/environment";
import { Configuration } from "../configuration";

/* tslint:disable:no-unused-variable member-ordering */

@Injectable()
export class LocationApi {
  protected basePath = environment.baseApiPath;
  public defaultHeaders: Headers = new Headers();
  public configuration: Configuration = new Configuration();

  constructor(
    protected http: Http,
    @Optional()
    @Inject(environment.baseApiPath)
    basePath: string,
    @Optional() configuration: Configuration
  ) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
    }
  }

  /**
   *
   * Extends object by coping non-existing properties.
   * @param objA object to be extended
   * @param objB source object
   */
  private extendObj<T1, T2>(objA: T1, objB: T2): T1 & T2 {
    for (let key in objB) {
      if (objB.hasOwnProperty(key)) {
        (<T1 & T2>objA)[key] = (<T1 & T2>objB)[key];
      }
    }
    return <T1 & T2>objA;
  }

  private handleResponse = (response: Response) => {
    if (response.status === 204) {
      return undefined;
    } else {
      return response.json();
    }
  };

  /**
   * Get a collection of countries
   *
   */
  public locationsCountryGet(
    extraHttpRequestParams?: any
  ): Observable<models.Countries> {
    return this.locationsCountryGetWithHttpInfo(extraHttpRequestParams).map(
      this.handleResponse
    );
  }

  /**
   * Get the states of a country
   *
   * @param id The record identifier number
   */
  public locationsCountryIdGet(
    id: number,
    extraHttpRequestParams?: any
  ): Observable<models.States> {
    return this.locationsCountryIdGetWithHttpInfo(
      id,
      extraHttpRequestParams
    ).map(this.handleResponse);
  }

  /**
   * Merge a location into another location
   * Affects all applicant with this location
   * @param id The record identifier number
   * @param townId Town id
   */
  public locationsIdDelete(
    id: number,
    townId: number,
    extraHttpRequestParams?: any
  ): Observable<{}> {
    return this.locationsIdDeleteWithHttpInfo(
      id,
      townId,
      extraHttpRequestParams
    ).map(this.handleResponse);
  }

  /**
   * Approve a location record
   *
   * @param id The record identifier number
   */
  public locationsIdPut(
    id: number,
    extraHttpRequestParams?: any
  ): Observable<{}> {
    return this.locationsIdPutWithHttpInfo(id, extraHttpRequestParams).map(
      this.handleResponse
    );
  }

  /**
   * Add a new location to the dictionary of locations
   *
   * @param cityName
   * @param countryId
   * @param stateId state is required for countries with distribution to states / regions
   */
  public locationsPost(
    cityName: string,
    countryId: number,
    stateId?: number,
    extraHttpRequestParams?: any
  ): Observable<models.EntityId> {
    return this.locationsPostWithHttpInfo(
      cityName,
      countryId,
      stateId,
      extraHttpRequestParams
    ).map(this.handleResponse);
  }

  /**
   * Get a collection of countries
   *
   */
  public locationsCountryGetWithHttpInfo(
    extraHttpRequestParams?: any
  ): Observable<Response> {
    const path = this.basePath + `/locations/country`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Get the states of a country
   *
   * @param id The record identifier number
   */
  public locationsCountryIdGetWithHttpInfo(
    id: number,
    extraHttpRequestParams?: any
  ): Observable<Response> {
    const path = this.basePath + `/locations/country/${id}`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling locationsCountryIdGet."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Merge a location into another location
   * Affects all applicant with this location
   * @param id The record identifier number
   * @param townId Town id
   */
  public locationsIdDeleteWithHttpInfo(
    id: number,
    townId: number,
    extraHttpRequestParams?: any
  ): Observable<Response> {
    const path = this.basePath + `/locations/${id}`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    let formParams = new URLSearchParams();

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling locationsIdDelete."
      );
    }
    // verify required parameter 'townId' is not null or undefined
    if (townId === null || townId === undefined) {
      throw new Error(
        "Required parameter townId was null or undefined when calling locationsIdDelete."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    headers.set("Content-Type", "application/x-www-form-urlencoded");

    if (townId !== undefined) {
      formParams.set("town_id", <any>townId);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Delete,
      headers: headers,
      body: formParams.toString(),
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Approve a location record
   *
   * @param id The record identifier number
   */
  public locationsIdPutWithHttpInfo(
    id: number,
    extraHttpRequestParams?: any
  ): Observable<Response> {
    const path = this.basePath + `/locations/${id}`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling locationsIdPut."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Put,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Add a new location to the dictionary of locations
   *
   * @param cityName
   * @param countryId
   * @param stateId state is required for countries with distribution to states / regions
   */
  public locationsPostWithHttpInfo(
    cityName: string,
    countryId: number,
    stateId?: number,
    extraHttpRequestParams?: any
  ): Observable<Response> {
    const path = this.basePath + `/locations`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    let formParams = new URLSearchParams();

    // verify required parameter 'cityName' is not null or undefined
    if (cityName === null || cityName === undefined) {
      throw new Error(
        "Required parameter cityName was null or undefined when calling locationsPost."
      );
    }
    // verify required parameter 'countryId' is not null or undefined
    if (countryId === null || countryId === undefined) {
      throw new Error(
        "Required parameter countryId was null or undefined when calling locationsPost."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    headers.set("Content-Type", "application/x-www-form-urlencoded");

    if (cityName !== undefined) {
      formParams.set("city_name", <any>cityName);
    }
    if (countryId !== undefined) {
      formParams.set("country_id", <any>countryId);
    }
    if (stateId !== undefined) {
      formParams.set("state_id", <any>stateId);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Post,
      headers: headers,
      body: formParams.toString(),
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }
}
