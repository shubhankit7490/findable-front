/**
 * Findable API
 * Findable Restful API Business services
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Inject, Injectable, Optional } from "@angular/core";
import { Http, Headers, URLSearchParams } from "@angular/http";
import {
  RequestMethod,
  RequestOptions,
  RequestOptionsArgs
} from "@angular/http";
import { Response, ResponseContentType } from "@angular/http";

import { Observable } from "rxjs/Observable";
import "rxjs/add/operator/map";

import * as models from "../model/models";
import { environment } from "environments/environment";
import { Configuration } from "../configuration";

/* tslint:disable:no-unused-variable member-ordering */

@Injectable()
export class BusinessApi {
  protected basePath = environment.baseApiPath;
  public defaultHeaders: Headers = new Headers();
  public configuration: Configuration = new Configuration();

  constructor(
    protected http: Http,
    @Optional()
    @Inject(environment.baseApiPath)
    basePath: string,
    @Optional() configuration: Configuration
  ) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
    }
  }

  /**
   *
   * Extends object by coping non-existing properties.
   * @param objA object to be extended
   * @param objB source object
   */
  private extendObj<T1, T2>(objA: T1, objB: T2): T1 & T2 {
    for (let key in objB) {
      if (objB.hasOwnProperty(key)) {
        (<T1 & T2>objA)[key] = (<T1 & T2>objB)[key];
      }
    }
    return <T1 & T2>objA;
  }

  private handleResponse = (response: Response) => {
    if (response.status === 204) {
      return undefined;
    } else {
      return response.json();
    }
  };

  /**
   * Get the collection of the businesses in the system
   * Limited to admin role only
   * @param limit The maximum number of results in every batch (50/100/200)
   * @param offset
   * @param start The minimum range of the record creation date-time
   * @param end The maximum range of the record creation date-time
   */
  public businessGet(
    limit?: number,
    offset?: number,
    start?: string,
    end?: string,
    extraHttpRequestParams?: any
  ): Observable<models.MinimalBusinessesProfiles> {
    return this.businessGetWithHttpInfo(
      limit,
      offset,
      start,
      end,
      extraHttpRequestParams
    ).map(this.handleResponse);
  }

  /**
   * Update a package
   * Accessible to the admin role only
   * @param id The record identifier number
   * @param _package The updated package object
   */
  public packageIdPut(
    id: number,
    _package?: models.ModelPackage,
    extraHttpRequestParams?: any
  ): Observable<{}> {
    return this.packageIdPutWithHttpInfo(
      id,
      _package,
      extraHttpRequestParams
    ).map(this.handleResponse);
  }

  /**
   * Update the status of a business
   * Limited to admin role only
   * @param businessId The business identifier number
   * @param status
   */
  public platformBusinessBusinessIdPut(
    businessId: number,
    status?: models.BusinessStatus,
    extraHttpRequestParams?: any
  ): Observable<models.Success> {
    return this.platformBusinessBusinessIdPutWithHttpInfo(
      businessId,
      status,
      extraHttpRequestParams
    ).map(this.handleResponse);
  }

  /**
   * Get a collections of dictionary items
   * Every collection is limited to 50 members and admin role only
   * @param dictionary The name of the requested dictionary items
   * @param approved Should get the approved of the suggested items
   * @param offset The batch number from the result collection
   */
  public platformDictionaryGet(
    dictionary?: string,
    approved?: number,
    offset?: number,
    extraHttpRequestParams?: any
  ): Observable<models.PlatformDictionary> {
    return this.platformDictionaryGetWithHttpInfo(
      dictionary,
      approved,
      offset,
      extraHttpRequestParams
    ).map(this.handleResponse);
  }

  /**
   * Login on behalf of a business manager
   * Limited to admin role only
   * @param id The record identifier number
   */
  public platformLoginBusinessIdPost(
    id: number,
    extraHttpRequestParams?: any
  ): Observable<models.Success> {
    return this.platformLoginBusinessIdPostWithHttpInfo(
      id,
      extraHttpRequestParams
    ).map(this.handleResponse);
  }

  /**
   * Login on behalf of a user
   * Limited to admin role only
   * @param id The record identifier number
   */
  public platformLoginUserIdPost(
    id: number,
    extraHttpRequestParams?: any
  ): Observable<models.Success> {
    return this.platformLoginUserIdPostWithHttpInfo(
      id,
      extraHttpRequestParams
    ).map(this.handleResponse);
  }

  /**
   * Logout from a user / business account
   * Limited to admin role only
   */
  public platformLogoutPost(
    extraHttpRequestParams?: any
  ): Observable<models.Success> {
    return this.platformLogoutPostWithHttpInfo(extraHttpRequestParams).map(
      this.handleResponse
    );
  }

  /**
   * Get a collection of all the applicant contact requests made in the platform
   * Every collection is limited to 50 members and admin role only
   * @param offset The batch number from the result collection
   */
  public platformRequestsGet(
    offset?: number,
    extraHttpRequestParams?: any
  ): Observable<models.ApplicantContactRequests> {
    return this.platformRequestsGetWithHttpInfo(
      offset,
      extraHttpRequestParams
    ).map(this.handleResponse);
  }

  /**
   * Get the statistics of the platform&#39;s activity
   * Limited to admin role only
   */
  public platformStatsGet(
    extraHttpRequestParams?: any
  ): Observable<models.PlatformStats> {
    return this.platformStatsGetWithHttpInfo(extraHttpRequestParams).map(
      this.handleResponse
    );
  }

  /**
   * Update the status of a user
   * Limited to admin role only
   * @param userId The user identifier number
   * @param status
   */
  public platformUsersUserIdPut(
    userId: number,
    status?: models.Status,
    extraHttpRequestParams?: any
  ): Observable<models.Success> {
    return this.platformUsersUserIdPutWithHttpInfo(
      userId,
      status,
      extraHttpRequestParams
    ).map(this.handleResponse);
  }

  /**
   * Get a collections of reports
   * Every collection is limited to 50 members and admin role only
   * @param offset
   */
  public faultsGet(
    offset?: number,
    extraHttpRequestParams?: any
  ): Observable<models.Reports> {
    return this.faultsGetWithHttpInfo(offset, extraHttpRequestParams).map(
      this.handleResponse
    );
  }

  /**
   * Delete a fault report
   * Accessible to the admin roles only
   * @param id The record identifier number
   */
  public faultsIdDelete(
    id: number,
    extraHttpRequestParams?: any
  ): Observable<models.Success> {
    return this.faultsIdDeleteWithHttpInfo(id, extraHttpRequestParams).map(
      this.handleResponse
    );
  }

  /**
   * Collection of users
   * Limited to admin role only
   * @param limit The maximum number of results in every batch (50/100/200)
   * @param offset The page number of the results
   * @param start The minimum range of the record creation date-time
   * @param end The maximum range of the record creation date-time
   */
  public usersGet(
    limit?: number,
    offset?: number,
    start?: string,
    end?: string,
    extraHttpRequestParams?: any
  ): Observable<models.MinimalUsersProfiles> {
    return this.usersGetWithHttpInfo(
      limit,
      offset,
      start,
      end,
      extraHttpRequestParams
    ).map(this.handleResponse);
  }

  /**
   * Get the messages posted to the platform administrator
   * Accessible to the admin roles only
   * @param limit The maximum number of results in every batch (50/100/200)
   * @param offset The page number of the results
   */
  public messageGet(
    limit?: number,
    offset?: number,
    extraHttpRequestParams?: any
  ): Observable<models.Messages> {
    return this.messageGetWithHttpInfo(
      limit,
      offset,
      extraHttpRequestParams
    ).map(this.handleResponse);
  }

  /**
   * Get the collection of the businesses in the system
   * Limited to admin role only
   * @param limit The maximum number of results in every batch (50/100/200)
   * @param offset
   * @param start The minimum range of the record creation date-time
   * @param end The maximum range of the record creation date-time
   */
  public businessGetWithHttpInfo(
    limit?: number,
    offset?: number,
    start?: string,
    end?: string,
    extraHttpRequestParams?: any
  ): Observable<Response> {
    const path = this.basePath + `/business`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    if (limit !== undefined) {
      queryParameters.set("limit", <any>limit);
    }
    if (offset !== undefined) {
      queryParameters.set("offset", <any>offset);
    }
    if (start !== undefined) {
      queryParameters.set("start", <any>start);
    }
    if (end !== undefined) {
      queryParameters.set("end", <any>end);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Update a package
   * Accessible to the admin role only
   * @param id The record identifier number
   * @param _package The updated package object
   */
  public packageIdPutWithHttpInfo(
    id: number,
    _package?: models.ModelPackage,
    extraHttpRequestParams?: any
  ): Observable<Response> {
    const path = this.basePath + `/package/${id}`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling packageIdPut."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    headers.set("Content-Type", "application/json");

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Put,
      headers: headers,
      body: _package == null ? "" : JSON.stringify(_package), // https://github.com/angular/angular/issues/10612
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Update the status of a business
   * Limited to admin role only
   * @param businessId The business identifier number
   * @param status
   */
  public platformBusinessBusinessIdPutWithHttpInfo(
    businessId: number,
    status?: models.BusinessStatus,
    extraHttpRequestParams?: any
  ): Observable<Response> {
    const path = this.basePath + `/platform/business/${businessId}`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'businessId' is not null or undefined
    if (businessId === null || businessId === undefined) {
      throw new Error(
        "Required parameter businessId was null or undefined when calling platformBusinessBusinessIdPut."
      );
    }

    headers.set("Content-Type", "application/json");

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Put,
      headers: headers,
      body: status == null ? "" : JSON.stringify(status), // https://github.com/angular/angular/issues/10612
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Get a collections of dictionary items
   * Every collection is limited to 50 members and admin role only
   * @param dictionary The name of the requested dictionary items
   * @param approved Should get the approved of the suggested items
   * @param offset The batch number from the result collection
   */
  public platformDictionaryGetWithHttpInfo(
    dictionary?: string,
    approved?: number,
    offset?: number,
    extraHttpRequestParams?: any
  ): Observable<Response> {
    const path = this.basePath + `/platform/dictionary`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    if (dictionary !== undefined) {
      queryParameters.set("dictionary", <any>dictionary);
    }
    if (approved !== undefined) {
      queryParameters.set("approved", <any>approved);
    }
    if (offset !== undefined) {
      queryParameters.set("offset", <any>offset);
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Login on behalf of a business manager
   * Limited to admin role only
   * @param id The record identifier number
   */
  public platformLoginBusinessIdPostWithHttpInfo(
    id: number,
    extraHttpRequestParams?: any
  ): Observable<Response> {
    const path = this.basePath + `/platform/login/business/${id}`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling platformLoginBusinessIdPost."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Post,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Login on behalf of a user
   * Limited to admin role only
   * @param id The record identifier number
   */
  public platformLoginUserIdPostWithHttpInfo(
    id: number,
    extraHttpRequestParams?: any
  ): Observable<Response> {
    const path = this.basePath + `/platform/login/user/${id}`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling platformLoginUserIdPost."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Post,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Logout from a user / business account
   * Limited to admin role only
   */
  public platformLogoutPostWithHttpInfo(
    extraHttpRequestParams?: any
  ): Observable<Response> {
    const path = this.basePath + `/platform/logout`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Post,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Get a collection of all the applicant contact requests made in the platform
   * Every collection is limited to 50 members and admin role only
   * @param offset The batch number from the result collection
   */
  public platformRequestsGetWithHttpInfo(
    offset?: number,
    extraHttpRequestParams?: any
  ): Observable<Response> {
    const path = this.basePath + `/platform/requests`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    if (offset !== undefined) {
      queryParameters.set("offset", <any>offset);
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Get the statistics of the platform&#39;s activity
   * Limited to admin role only
   */
  public platformStatsGetWithHttpInfo(
    extraHttpRequestParams?: any
  ): Observable<Response> {
    const path = this.basePath + `/platform/stats`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Update the status of a user
   * Limited to admin role only
   * @param userId The user identifier number
   * @param status
   */
  public platformUsersUserIdPutWithHttpInfo(
    userId: number,
    status?: models.Status,
    extraHttpRequestParams?: any
  ): Observable<Response> {
    const path = this.basePath + `/platform/users/${userId}`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'userId' is not null or undefined
    if (userId === null || userId === undefined) {
      throw new Error(
        "Required parameter userId was null or undefined when calling platformUsersUserIdPut."
      );
    }

    headers.set("Content-Type", "application/json");

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Put,
      headers: headers,
      body: status == null ? "" : JSON.stringify(status), // https://github.com/angular/angular/issues/10612
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Get a collections of reports
   * Every collection is limited to 50 members and admin role only
   * @param offset
   */
  public faultsGetWithHttpInfo(
    offset?: number,
    extraHttpRequestParams?: any
  ): Observable<Response> {
    const path = this.basePath + `/faults`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    if (offset !== undefined) {
      queryParameters.set("offset", <any>offset);
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Delete a fault report
   * Accessible to the admin roles only
   * @param id The record identifier number
   */
  public faultsIdDeleteWithHttpInfo(
    id: number,
    extraHttpRequestParams?: any
  ): Observable<Response> {
    const path = this.basePath + `/faults/${id}`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling faultsIdDelete."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Delete,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Collection of users
   * Limited to admin role only
   * @param limit The maximum number of results in every batch (50/100/200)
   * @param offset The page number of the results
   * @param start The minimum range of the record creation date-time
   * @param end The maximum range of the record creation date-time
   */
  public usersGetWithHttpInfo(
    limit?: number,
    offset?: number,
    start?: string,
    end?: string,
    extraHttpRequestParams?: any
  ): Observable<Response> {
    const path = this.basePath + `/users`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    if (limit !== undefined) {
      queryParameters.set("limit", <any>limit);
    }
    if (offset !== undefined) {
      queryParameters.set("offset", <any>offset);
    }
    if (start !== undefined) {
      queryParameters.set("start", <any>start);
    }
    if (end !== undefined) {
      queryParameters.set("end", <any>end);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Get the messages posted to the platform administrator
   * Accessible to the admin roles only
   * @param limit The maximum number of results in every batch (50/100/200)
   * @param offset The page number of the results
   */
  public messageGetWithHttpInfo(
    limit?: number,
    offset?: number,
    extraHttpRequestParams?: any
  ): Observable<Response> {
    const path = this.basePath + `/message`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    if (limit !== undefined) {
      queryParameters.set("limit", <any>limit);
    }
    if (offset !== undefined) {
      queryParameters.set("offset", <any>offset);
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }
}
