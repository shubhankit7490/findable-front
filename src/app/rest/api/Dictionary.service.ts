/**
 * Findable API
 * Findable Restful API Dictionary services
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Inject, Injectable, Optional } from "@angular/core";
import { Http, Headers, URLSearchParams } from "@angular/http";
import {
  RequestMethod,
  RequestOptions,
  RequestOptionsArgs
} from "@angular/http";
import { Response } from "@angular/http";

import { Observable } from "rxjs/Observable";
import "rxjs/add/operator/map";

import * as models from "../model/models";
import { environment } from "environments/environment";
import { Configuration } from "../configuration";

import { extendObj, handleResponse } from './utils.api';

/* tslint:disable:no-unused-variable member-ordering */

@Injectable()
export class DictionaryApi {
  protected basePath = environment.baseApiPath;
  public defaultHeaders: Headers = new Headers();
  public configuration: Configuration = new Configuration();
  private extendObj = extendObj;
  private handleResponse = handleResponse;

  constructor(
    protected http: Http,
    @Optional()
    @Inject(environment.baseApiPath)
    basePath: string,
    @Optional() configuration: Configuration
  ) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
    }
  }

  /**
   * Get a dictionary of the businesses in the platform
   *
   * @param name Business name
   */
  public dictionaryBusinessGet(
    name: string,
    extraHttpRequestParams?: any
  ): Observable<models.DictionaryItem[]> {
    const path = this.basePath + `/dictionary/business`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'name' is not null or undefined
    if (name === null || name === undefined) {
      throw new Error(
        "Required parameter name was null or undefined when calling dictionaryBusinessGet."
      );
    }
    if (name !== undefined) {
      queryParameters.set("name", <any>name);
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Get a collection of companies matching the given criteria
   *
   * @param name School name
   */
  public dictionaryCompanyGet(
    name: string,
    extraHttpRequestParams?: any
  ): Observable<models.DictionaryItem[]> {
    const path = this.basePath + `/dictionary/company`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'name' is not null or undefined
    if (name === null || name === undefined) {
      throw new Error(
        "Required parameter name was null or undefined when calling dictionaryCompanyGet."
      );
    }
    if (name !== undefined) {
      queryParameters.set("name", <any>name);
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Merge a new company entry
   * Affects all applicants with this company
   * @param id The record identifier number
   * @param newid The new record identifier number
   */
  public dictionaryCompanyIdNewidDelete(
    id: number,
    newid: number,
    extraHttpRequestParams?: any
  ): Observable<{}> {
    const path = this.basePath + `/dictionary/company/${id}/${newid}`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling dictionaryCompanyIdNewidDelete."
      );
    }
    // verify required parameter 'newid' is not null or undefined
    if (newid === null || newid === undefined) {
      throw new Error(
        "Required parameter newid was null or undefined when calling dictionaryCompanyIdNewidDelete."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Delete,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Approve a new company entry
   *
   * @param id The record identifier number
   */
  public dictionaryCompanyIdPut(
    id: number,
    extraHttpRequestParams?: any
  ): Observable<{}> {
    const path = this.basePath + `/dictionary/company/${id}`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling dictionaryCompanyIdPut."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Put,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Add a new company to the companies dictionary
   *
   * @param name company name
   */
  public dictionaryCompanyPost(
    name: string,
    extraHttpRequestParams?: any
  ): Observable<models.NewDictionaryEntry> {
    const path = this.basePath + `/dictionary/company`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    let formParams = new URLSearchParams();

    // verify required parameter 'name' is not null or undefined
    if (name === null || name === undefined) {
      throw new Error(
        "Required parameter name was null or undefined when calling dictionaryCompanyPost."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    headers.set("Content-Type", "application/x-www-form-urlencoded");

    if (name !== undefined) {
      formParams.set("name", <any>name);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Post,
      headers: headers,
      body: formParams.toString(),
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Get a collection of education levels
   *
   */
  public dictionaryEducationLevelsGet(
    extraHttpRequestParams?: any
  ): Observable<models.EducationLevel[]> {
    const path = this.basePath + `/dictionary/education_levels`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Get a dictionary of the enums in the platform
   *
   */
  public dictionaryEnumsGet(
    extraHttpRequestParams?: any
  ): Observable<models.Enums> {
    const path = this.basePath + `/dictionary/enums`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Get a collection of areas of focus matching the given criteria
   *
   * @param name School name
   * @param extended Extend the limit of the result collection to 1000 records
   */
  public dictionaryFocusareasGet(
    name: string,
    extended?: boolean,
    extraHttpRequestParams?: any
  ): Observable<models.SingleDictionary> {
    const path = this.basePath + `/dictionary/focusareas`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'name' is not null or undefined
    if (name === null || name === undefined) {
      throw new Error(
        "Required parameter name was null or undefined when calling dictionaryFocusareasGet."
      );
    }
    if (name !== undefined) {
      queryParameters.set("name", <any>name);
    }
    if (extended !== undefined) {
      queryParameters.set("extended", <any>extended);
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Merge a new area of focus entry
   * Affects all applicants with this area of focus
   * @param id The record identifier number
   * @param newid The new record identifier number
   */
  public dictionaryFocusareasIdNewidDelete(
    id: number,
    newid: number,
    extraHttpRequestParams?: any
  ): Observable<{}> {
    const path = this.basePath + `/dictionary/focusareas/${id}/${newid}`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling dictionaryFocusareasIdNewidDelete."
      );
    }
    // verify required parameter 'newid' is not null or undefined
    if (newid === null || newid === undefined) {
      throw new Error(
        "Required parameter newid was null or undefined when calling dictionaryFocusareasIdNewidDelete."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Delete,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Approve a new area of focus entry
   *
   * @param id The record identifier number
   */
  public dictionaryFocusareasIdPut(
    id: number,
    extraHttpRequestParams?: any
  ): Observable<{}> {
    const path = this.basePath + `/dictionary/focusareas/${id}`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling dictionaryFocusareasIdPut."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Put,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Add a new area of focus to the areas of focus dictionary
   *
   * @param name area of focus name
   */
  public dictionaryFocusareasPost(
    name: string,
    extraHttpRequestParams?: any
  ): Observable<models.NewDictionaryEntry> {
    const path = this.basePath + `/dictionary/focusareas`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    let formParams = new URLSearchParams();

    // verify required parameter 'name' is not null or undefined
    if (name === null || name === undefined) {
      throw new Error(
        "Required parameter name was null or undefined when calling dictionaryFocusareasPost."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    headers.set("Content-Type", "application/x-www-form-urlencoded");

    if (name !== undefined) {
      formParams.set("name", <string>name);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Post,
      headers: headers,
      body: formParams.toString(),
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Get a collection of industries matching the given criteria
   *
   * @param name School name
   */
  public dictionaryIndustryGet(
    name: string,
    extraHttpRequestParams?: any
  ): Observable<models.SingleDictionary> {
    const path = this.basePath + `/dictionary/industry`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'name' is not null or undefined
    if (name === null || name === undefined) {
      throw new Error(
        "Required parameter name was null or undefined when calling dictionaryIndustryGet."
      );
    }
    if (name !== undefined) {
      queryParameters.set("name", <string>name);
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Merge a new industry entry
   * Affects all applicants with this industry
   * @param id The record identifier number
   * @param newid The new record identifier number
   */
  public dictionaryIndustryIdNewidDelete(
    id: number,
    newid: number,
    extraHttpRequestParams?: any
  ): Observable<{}> {
    const path = this.basePath + `/dictionary/industry/${id}/${newid}`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling dictionaryIndustryIdNewidDelete."
      );
    }
    // verify required parameter 'newid' is not null or undefined
    if (newid === null || newid === undefined) {
      throw new Error(
        "Required parameter newid was null or undefined when calling dictionaryIndustryIdNewidDelete."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Delete,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Approve a new industry entry
   *
   * @param id The record identifier number
   */
  public dictionaryIndustryIdPut(
    id: number,
    extraHttpRequestParams?: any
  ): Observable<{}> {
    const path = this.basePath + `/dictionary/industry/${id}`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling dictionaryIndustryIdPut."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Put,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Add a new industry to the industries dictionary
   *
   * @param name Industry name
   */
  public dictionaryIndustryPost(
    name: string,
    extraHttpRequestParams?: any
  ): Observable<models.NewDictionaryEntry> {
    const path = this.basePath + `/dictionary/industry`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    let formParams = new URLSearchParams();

    // verify required parameter 'name' is not null or undefined
    if (name === null || name === undefined) {
      throw new Error(
        "Required parameter name was null or undefined when calling dictionaryIndustryPost."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    headers.set("Content-Type", "application/x-www-form-urlencoded");

    if (name !== undefined) {
      formParams.set("name", <any>name);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Post,
      headers: headers,
      body: formParams.toString(),
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Get a collection of job titles matching the given criteria
   *
   * @param name School name
   */
  public dictionaryJobtitleGet(
    name: string,
    extraHttpRequestParams?: any
  ): Observable<models.DictionaryItem[]> {
    const path = this.basePath + `/dictionary/jobtitle`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'name' is not null or undefined
    if (name === null || name === undefined) {
      throw new Error(
        "Required parameter name was null or undefined when calling dictionaryJobtitleGet."
      );
    }
    if (name !== undefined) {
      queryParameters.set("name", <any>name);
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Merge a new job title entry
   * Affects all applicants with this job title
   * @param id The record identifier number
   * @param newid The new record identifier number
   */
  public dictionaryJobtitleIdNewidDelete(
    id: number,
    newid: number,
    extraHttpRequestParams?: any
  ): Observable<{}> {
    const path = this.basePath + `/dictionary/jobtitle/${id}/${newid}`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling dictionaryJobtitleIdNewidDelete."
      );
    }
    // verify required parameter 'newid' is not null or undefined
    if (newid === null || newid === undefined) {
      throw new Error(
        "Required parameter newid was null or undefined when calling dictionaryJobtitleIdNewidDelete."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Delete,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Approve a new job title entry
   *
   * @param id The record identifier number
   */
  public dictionaryJobtitleIdPut(
    id: number,
    extraHttpRequestParams?: any
  ): Observable<{}> {
    const path = this.basePath + `/dictionary/jobtitle/${id}`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling dictionaryJobtitleIdPut."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Put,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Add a new job title to the job titles dictionary
   *
   * @param name Job title name
   */
  public dictionaryJobtitlePost(
    name: string,
    extraHttpRequestParams?: any
  ): Observable<models.NewDictionaryEntry> {
    const path = this.basePath + `/dictionary/jobtitle`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    let formParams = new URLSearchParams();

    // verify required parameter 'name' is not null or undefined
    if (name === null || name === undefined) {
      throw new Error(
        "Required parameter name was null or undefined when calling dictionaryJobtitlePost."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    headers.set("Content-Type", "application/x-www-form-urlencoded");

    if (name !== undefined) {
      formParams.set("name", <any>name);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Post,
      headers: headers,
      body: formParams.toString(),
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Get a collection of languages matching the given criteria
   *
   * @param name Language name
   * @param extended Extend the limit of the result collection to 1000 records
   */
  public dictionaryLanguagesGet(
    name: string,
    extended?: boolean,
    extraHttpRequestParams?: any
  ): Observable<models.SingleDictionary> {
    const path = this.basePath + `/dictionary/languages`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'name' is not null or undefined
    if (name === null || name === undefined) {
      throw new Error(
        "Required parameter name was null or undefined when calling dictionaryLanguagesGet."
      );
    }
    if (name !== undefined) {
      queryParameters.set("name", <any>name);
    }
    if (extended !== undefined) {
      queryParameters.set("extended", <any>extended);
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Get a dictionary collection width optional filtering criteria for each dictionary
   *
   * @param dictionaries
   */
  public dictionaryPost(
    dictionaries: models.DictionaryRequests,
    extraHttpRequestParams?: any
  ): Observable<models.Dictionaries> {
    const path = this.basePath + `/dictionary`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'dictionaries' is not null or undefined
    if (dictionaries === null || dictionaries === undefined) {
      throw new Error(
        "Required parameter dictionaries was null or undefined when calling dictionaryPost."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    headers.set("Content-Type", "application/json");

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Post,
      headers: headers,
      body: dictionaries == null ? "" : JSON.stringify(dictionaries), // https://github.com/angular/angular/issues/10612
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Get a collection of schools matching the given criteria
   *
   * @param name School name
   */
  public dictionarySchoolsGet(
    name: string,
    extraHttpRequestParams?: any
  ): Observable<models.DictionaryItem[]> {
    const path = this.basePath + `/dictionary/schools`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'name' is not null or undefined
    if (name === null || name === undefined) {
      throw new Error(
        "Required parameter name was null or undefined when calling dictionarySchoolsGet."
      );
    }
    if (name !== undefined) {
      queryParameters.set("name", <string>name);
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Merge a new school entry
   * Affects all applicants with this school
   * @param id The record identifier number
   * @param newid The new record identifier number
   */
  public dictionarySchoolsIdNewidDelete(
    id: number,
    newid: number,
    extraHttpRequestParams?: any
  ): Observable<{}> {
    const path = this.basePath + `/dictionary/schools/${id}/${newid}`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling dictionarySchoolsIdNewidDelete."
      );
    }
    // verify required parameter 'newid' is not null or undefined
    if (newid === null || newid === undefined) {
      throw new Error(
        "Required parameter newid was null or undefined when calling dictionarySchoolsIdNewidDelete."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Delete,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Approve a new school entry
   *
   * @param id The record identifier number
   */
  public dictionarySchoolsIdPut(
    id: number,
    extraHttpRequestParams?: any
  ): Observable<{}> {
    const path = this.basePath + `/dictionary/schools/${id}`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling dictionarySchoolsIdPut."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Put,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Add a new school to the schools dictionary
   *
   * @param name School name
   */
  public dictionarySchoolsPost(
    name: string,
    extraHttpRequestParams?: any
  ): Observable<models.NewDictionaryEntry> {
    const path = this.basePath + `/dictionary/schools`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    let formParams = new URLSearchParams();

    // verify required parameter 'name' is not null or undefined
    if (name === null || name === undefined) {
      throw new Error(
        "Required parameter name was null or undefined when calling dictionarySchoolsPost."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    headers.set("Content-Type", "application/x-www-form-urlencoded");

    if (name !== undefined) {
      formParams.set("name", <any>name);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Post,
      headers: headers,
      body: formParams.toString(),
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Get a collection of seniorities matching the given criteria
   *
   * @param name School name
   */
  public dictionarySeniorityGet(
    name: string,
    extraHttpRequestParams?: any
  ): Observable<models.SingleDictionary> {
    const path = this.basePath + `/dictionary/seniority`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'name' is not null or undefined
    if (name === null || name === undefined) {
      throw new Error(
        "Required parameter name was null or undefined when calling dictionarySeniorityGet."
      );
    }
    if (name !== undefined) {
      queryParameters.set("name", <any>name);
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Merge a new seniority entry
   * Affects all applicants with this seniority
   * @param id The record identifier number
   * @param newid The new record identifier number
   */
  public dictionarySeniorityIdNewidDelete(
    id: number,
    newid: number,
    extraHttpRequestParams?: any
  ): Observable<{}> {
    const path = this.basePath + `/dictionary/seniority/${id}/${newid}`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling dictionarySeniorityIdNewidDelete."
      );
    }
    // verify required parameter 'newid' is not null or undefined
    if (newid === null || newid === undefined) {
      throw new Error(
        "Required parameter newid was null or undefined when calling dictionarySeniorityIdNewidDelete."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Delete,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Approve a new seniority entry
   *
   * @param id The record identifier number
   */
  public dictionarySeniorityIdPut(
    id: number,
    extraHttpRequestParams?: any
  ): Observable<{}> {
    const path = this.basePath + `/dictionary/seniority/${id}`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling dictionarySeniorityIdPut."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Put,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Add a new seniority to the seniorities dictionary
   *
   * @param name Seniority name
   */
  public dictionarySeniorityPost(
    name: string,
    extraHttpRequestParams?: any
  ): Observable<models.NewDictionaryEntry> {
    const path = this.basePath + `/dictionary/seniority`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    let formParams = new URLSearchParams();

    // verify required parameter 'name' is not null or undefined
    if (name === null || name === undefined) {
      throw new Error(
        "Required parameter name was null or undefined when calling dictionarySeniorityPost."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    headers.set("Content-Type", "application/x-www-form-urlencoded");

    if (name !== undefined) {
      formParams.set("name", <any>name);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Post,
      headers: headers,
      body: formParams.toString(),
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Get a collection of study fields matching the given criteria
   *
   * @param name Field of study name
   */
  public dictionaryStudyfieldsGet(
    name: string,
    extraHttpRequestParams?: any
  ): Observable<models.SingleDictionary> {
    const path = this.basePath + `/dictionary/studyfields`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'name' is not null or undefined
    if (name === null || name === undefined) {
      throw new Error(
        "Required parameter name was null or undefined when calling dictionaryStudyfieldsGet."
      );
    }
    if (name !== undefined) {
      queryParameters.set("name", <any>name);
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Merge a new field of study entry
   * Affects all applicants with this field of study
   * @param id The record identifier number
   * @param newid The new record identifier number
   */
  public dictionaryStudyfieldsIdNewidDelete(
    id: number,
    newid: number,
    extraHttpRequestParams?: any
  ): Observable<{}> {
    const path = this.basePath + `/dictionary/studyfields/${id}/${newid}`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling dictionaryStudyfieldsIdNewidDelete."
      );
    }
    // verify required parameter 'newid' is not null or undefined
    if (newid === null || newid === undefined) {
      throw new Error(
        "Required parameter newid was null or undefined when calling dictionaryStudyfieldsIdNewidDelete."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Delete,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Approve a new field of study entry
   *
   * @param id The record identifier number
   */
  public dictionaryStudyfieldsIdPut(
    id: number,
    extraHttpRequestParams?: any
  ): Observable<{}> {
    const path = this.basePath + `/dictionary/studyfields/${id}`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling dictionaryStudyfieldsIdPut."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Put,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Add a new field of study to the fields of study dictionary
   *
   * @param name Field of study name
   */
  public dictionaryStudyfieldsPost(
    name: string,
    extraHttpRequestParams?: any
  ): Observable<models.NewDictionaryEntry> {
    const path = this.basePath + `/dictionary/studyfields`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    let formParams = new URLSearchParams();

    // verify required parameter 'name' is not null or undefined
    if (name === null || name === undefined) {
      throw new Error(
        "Required parameter name was null or undefined when calling dictionaryStudyfieldsPost."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    headers.set("Content-Type", "application/x-www-form-urlencoded");

    if (name !== undefined) {
      formParams.set("name", <any>name);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Post,
      headers: headers,
      body: formParams.toString(),
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Get a collection of technical abillities matching the given criteria
   *
   * @param name Skill name
   */
  public dictionaryTechGet(
    name: string,
    extraHttpRequestParams?: any
  ): Observable<models.SingleDictionary> {
    const path = this.basePath + `/dictionary/tech`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'name' is not null or undefined
    if (name === null || name === undefined) {
      throw new Error(
        "Required parameter name was null or undefined when calling dictionaryTechGet."
      );
    }
    if (name !== undefined) {
      queryParameters.set("name", <any>name);
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Merge a new technical skill entry
   * Affects all applicants with this technical skill
   * @param id The record identifier number
   * @param newid The new record identifier number
   */
  public dictionaryTechIdNewidDelete(
    id: number,
    newid: number,
    extraHttpRequestParams?: any
  ): Observable<{}> {
    const path = this.basePath + `/dictionary/tech/${id}/${newid}`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling dictionaryTechIdNewidDelete."
      );
    }
    // verify required parameter 'newid' is not null or undefined
    if (newid === null || newid === undefined) {
      throw new Error(
        "Required parameter newid was null or undefined when calling dictionaryTechIdNewidDelete."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Delete,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Approve a new technical skill entry
   *
   * @param id The record identifier number
   */
  public dictionaryTechIdPut(
    id: number,
    extraHttpRequestParams?: any
  ): Observable<{}> {
    const path = this.basePath + `/dictionary/tech/${id}`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling dictionaryTechIdPut."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Put,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Add a new skill to the technical skills dictionary
   *
   * @param name Skill name
   */
  public dictionaryTechPost(
    name: string,
    extraHttpRequestParams?: any
  ): Observable<models.NewDictionaryEntry> {
    const path = this.basePath + `/dictionary/tech`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    let formParams = new URLSearchParams();

    // verify required parameter 'name' is not null or undefined
    if (name === null || name === undefined) {
      throw new Error(
        "Required parameter name was null or undefined when calling dictionaryTechPost."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    headers.set("Content-Type", "application/x-www-form-urlencoded");

    if (name !== undefined) {
      formParams.set("name", <any>name);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Post,
      headers: headers,
      body: formParams.toString(),
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Get a collection of traits matching the given criteria
   *
   * @param name School name
   * @param extended Extend the limit of the result collection to 1000 records
   */
  public dictionaryTraitsGet(
    name: string,
    extended?: boolean,
    extraHttpRequestParams?: any
  ): Observable<models.DictionaryItem[]> {
    const path = this.basePath + `/dictionary/traits`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'name' is not null or undefined
    if (name === null || name === undefined) {
      throw new Error(
        "Required parameter name was null or undefined when calling dictionaryTraitsGet."
      );
    }

    if (name !== undefined) {
      queryParameters.set("name", <string>name);
    }
    if (extended !== undefined) {
      queryParameters.set("extended", <any>extended);
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Get a collection of locations which matches the requested search cretiria
   *
   * @param location
   * @param state Optionally limit the results to a certain state
   * @param country Optionally limit the results to a certain country
   * @param expand Expand the search results to include countries and states
   */
  public locationsGet(
    location: string,
    state?: number,
    country?: number,
    expand?: boolean,
    extraHttpRequestParams?: any
  ): Observable<models.Locations> {
    const path = this.basePath + `/locations`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'location' is not null or undefined
    if (location === null || location === undefined) {
      throw new Error(
        "Required parameter location was null or undefined when calling locationsGet."
      );
    }
    if (location !== undefined) {
      queryParameters.set("location", <string>location);
    }
    if (state !== undefined) {
      queryParameters.set("state", <any>state);
    }
    if (country !== undefined) {
      queryParameters.set("country", <any>country);
    }
    if (expand !== undefined) {
      queryParameters.set("expand", <any>expand);
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }
}
