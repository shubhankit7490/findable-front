/**
 * Findable API
 * Findable Restful API
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Inject, Injectable, Optional } from "@angular/core";
import { Http, Headers, URLSearchParams } from "@angular/http";
import {
  RequestMethod,
  RequestOptions,
  RequestOptionsArgs
} from "@angular/http";
import { Response, ResponseContentType } from "@angular/http";

import { Observable } from "rxjs/Observable";
import "rxjs/add/operator/map";

import * as models from "../model/models";
import { environment } from "environments/environment";
import { Configuration } from "../configuration";

import { extendObj, handleResponse } from './utils.api';

/* tslint:disable:no-unused-variable member-ordering */

@Injectable()
export class DefaultApi {
  protected basePath = environment.baseApiPath;
  public defaultHeaders: Headers = new Headers();
  public configuration: Configuration = new Configuration();
  private extendObj = extendObj;
  private handleResponse = handleResponse;
  
  constructor(
    protected http: Http,
    @Optional()
    @Inject(environment.baseApiPath)
    basePath: string,
    @Optional() configuration: Configuration
  ) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
    }
  }

  /**
   * Get a collections of applicant&#39;s profiles
   * Every collection is limited to 50 members
   * @param offset
   * @param orderby can be &#39;location&#39; or &#39;jobtitle&#39; or &#39;experience&#39; or &#39;seniority&#39; or &#39;salary&#39;
   * @param order can be &#39;desc&#39; or &#39;asc&#39;
   * @param search
   */
  public applicantsPost(
    offset?: number,
    orderby?: string,
    order?: string,
    search?:
      | models.ApplicantsSearchProfile
      | models.ApplicantsSearchProfileParsed,
    extraHttpRequestParams?: any
  ): Observable<models.ApplicantsSearchResultProfiles> {
    const path = this.basePath + `/applicants`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    if (offset !== undefined) {
      queryParameters.set("offset", <any>offset);
    }
    if (orderby !== undefined) {
      queryParameters.set("orderby", <any>orderby);
    }
    if (order !== undefined) {
      queryParameters.set("order", <any>order);
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    headers.set("Content-Type", "application/json");

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Post,
      headers: headers,
      body: search == null ? "" : JSON.stringify(search), // https://github.com/angular/angular/issues/10612
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Create an email share of the user&#39;s profile
   *
   * @param to Target email address
   * @param subject Email subject
   * @param message Email message
   */
  public emailPost(
    to: string,
    subject: string,
    message: string,
    extraHttpRequestParams?: any
  ): Observable<{}> {
    const path = this.basePath + `/email`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    let formParams = new URLSearchParams();

    // verify required parameter 'to' is not null or undefined
    if (to === null || to === undefined) {
      throw new Error(
        "Required parameter to was null or undefined when calling emailPost."
      );
    }
    // verify required parameter 'subject' is not null or undefined
    if (subject === null || subject === undefined) {
      throw new Error(
        "Required parameter subject was null or undefined when calling emailPost."
      );
    }
    // verify required parameter 'message' is not null or undefined
    if (message === null || message === undefined) {
      throw new Error(
        "Required parameter message was null or undefined when calling emailPost."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    headers.set("Content-Type", "application/x-www-form-urlencoded");

    if (to !== undefined) {
      formParams.set("to", <any>to);
    }
    if (subject !== undefined) {
      formParams.set("subject", <any>subject);
    }
    if (message !== undefined) {
      formParams.set("message", <any>message);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Post,
      headers: headers,
      body: formParams.toString(),
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Log a user related action within the platform
   *
   * @param log The category of the log
   */
  public logPost(
    log?: models.Log,
    extraHttpRequestParams?: any
  ): Observable<{}> {
    const path = this.basePath + `/log`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    headers.set("Content-Type", "application/json");

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Post,
      headers: headers,
      body: log == null ? "" : JSON.stringify(log), // https://github.com/angular/angular/issues/10612
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Post a message to the platform administrator
   *
   * @param subject
   * @param message
   */
  public messagePost(
    subject: string,
    message: string,
    extraHttpRequestParams?: any
  ): Observable<{}> {
    const path = this.basePath + `/message`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    let formParams = new URLSearchParams();

    // verify required parameter 'subject' is not null or undefined
    if (subject === null || subject === undefined) {
      throw new Error(
        "Required parameter subject was null or undefined when calling messagePost."
      );
    }
    // verify required parameter 'message' is not null or undefined
    if (message === null || message === undefined) {
      throw new Error(
        "Required parameter message was null or undefined when calling messagePost."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    headers.set("Content-Type", "application/x-www-form-urlencoded");

    if (subject !== undefined) {
      formParams.set("subject", <any>subject);
    }
    if (message !== undefined) {
      formParams.set("message", <any>message);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Post,
      headers: headers,
      body: formParams.toString(),
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Get the avaliable packages
   *
   */
  public packageGet(extraHttpRequestParams?: any): Observable<models.Packages> {
    const path = this.basePath + `/package`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Get a search profile by its unique token
   * Accessible to the recruiter / manager / admin roles only
   * @param token The unique token (platform generated)
   */
  public searchTokenGet(
    token: string,
    extraHttpRequestParams?: any
  ): Observable<models.ApplicantsSearchProfileParsed> {
    const path = this.basePath + `/search/${token}`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'token' is not null or undefined
    if (token === null || token === undefined) {
      throw new Error(
        "Required parameter token was null or undefined when calling searchTokenGet."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Generate a token for the user
   *
   * @param type Token type
   */
  public tokensPost(
    type: string,
    extraHttpRequestParams?: any
  ): Observable<models.Token> {
    const path = this.basePath + `/tokens`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    let formParams = new URLSearchParams();

    // verify required parameter 'type' is not null or undefined
    if (type === null || type === undefined) {
      throw new Error(
        "Required parameter type was null or undefined when calling tokensPost."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    headers.set("Content-Type", "application/x-www-form-urlencoded");

    if (type !== undefined) {
      formParams.set("type", <any>type);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Post,
      headers: headers,
      body: formParams.toString(),
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   *
   * @summary Send an activation email is the user is pending
   */
  public usersConfirmPost(
    extraHttpRequestParams?: RequestOptionsArgs
  ): Observable<models.Success> {
    const path = `${this.basePath}/users/confirm`;
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Post,
      headers: headers
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(
        requestOptions,
        extraHttpRequestParams
      );
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Request a password reset link
   * The link is sent to the user&#39;s email
   * @param email
   */
  public usersForgotPost(
    email: string,
    extraHttpRequestParams?: any
  ): Observable<models.Success> {
    const path = this.basePath + `/users/forgot`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    let formParams = new URLSearchParams();

    // verify required parameter 'email' is not null or undefined
    if (email === null || email === undefined) {
      throw new Error(
        "Required parameter email was null or undefined when calling usersForgotPost."
      );
    }

    headers.set("Content-Type", "application/x-www-form-urlencoded");

    if (email !== undefined) {
      formParams.set("email", <any>email);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Post,
      headers: headers,
      body: formParams.toString(),
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Upload a profile image to the platform
   *
   * @param file
   */
  public usersImagesPost(
    file?: any,
    extraHttpRequestParams?: any
  ): Observable<models.ImageRecord> {
    const path = this.basePath + `/users/images`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    let formParams = new URLSearchParams();

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    headers.set("Content-Type", "application/x-www-form-urlencoded");

    if (file !== undefined) {
      formParams.set("file", <any>file);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Post,
      headers: headers,
      body: formParams.toString(),
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Login for a user
   *
   * @param email User&#39;s email
   * @param password User&#39;s password
   * @param apply business id to which to user will apply after the login
   */
  public usersLoginPost(
    email: string,
    password: string,
    apply?: number,
    extraHttpRequestParams?: any
  ): Observable<models.User> {
    const path = this.basePath + `/users/login`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    let formParams = new URLSearchParams();

    // verify required parameter 'email' is not null or undefined
    if (email === null || email === undefined) {
      throw new Error(
        "Required parameter email was null or undefined when calling usersLoginPost."
      );
    }
    // verify required parameter 'password' is not null or undefined
    if (password === null || password === undefined) {
      throw new Error(
        "Required parameter password was null or undefined when calling usersLoginPost."
      );
    }

    headers.set("Content-Type", "application/x-www-form-urlencoded");

    if (email !== undefined) {
      formParams.set("email", <any>email);
    }
    if (password !== undefined) {
      formParams.set("password", <any>password);
    }
    if (apply !== undefined) {
      formParams.set("apply", <any>apply);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Post,
      headers: headers,
      body: formParams.toString(),
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Get the personal details of the current user
   *
   */
  public usersMeProfileGet(
    extraHttpRequestParams?: any
  ): Observable<models.PersonalDetails> {
    const path = this.basePath + `/users/me/profile`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Update the personal details of the current user
   *
   * @param profile
   */
  public usersMeProfilePut(
    profile?: models.PersonalDetails,
    extraHttpRequestParams?: any
  ): Observable<models.Success> {
    const path = this.basePath + `/users/me/profile`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    headers.set("Content-Type", "application/json");

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Put,
      headers: headers,
      body: profile == null ? "" : JSON.stringify(profile), // https://github.com/angular/angular/issues/10612
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Reset the user&#39;s password
   *
   * @param token
   * @param password
   */
  public usersResetPost(
    token: string,
    password: string,
    extraHttpRequestParams?: any
  ): Observable<models.Success> {
    const path = this.basePath + `/users/reset`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    let formParams = new URLSearchParams();

    // verify required parameter 'token' is not null or undefined
    if (token === null || token === undefined) {
      throw new Error(
        "Required parameter token was null or undefined when calling usersResetPost."
      );
    }
    // verify required parameter 'password' is not null or undefined
    if (password === null || password === undefined) {
      throw new Error(
        "Required parameter password was null or undefined when calling usersResetPost."
      );
    }

    headers.set("Content-Type", "application/x-www-form-urlencoded");

    if (token !== undefined) {
      formParams.set("token", <any>token);
    }
    if (password !== undefined) {
      formParams.set("password", <any>password);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Post,
      headers: headers,
      body: formParams.toString(),
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Signup for a candidate
   *
   * @param firstname Candidate&#39;s first name
   * @param lastname Candidate&#39;s last name
   * @param email Candidate&#39;s email address
   * @param password Candidate&#39;s password
   * @param role applicant or manager
   * @param invite invite token (if present account can be activated automatically)
   * @param apply business id to which to user will apply after the signup
   */
  public usersSignupPost(
    firstname: string,
    lastname: string,
    email: string,
    password: string,
    role: string,
    invite?: string,
    apply?: number,
    extraHttpRequestParams?: any
  ): Observable<models.User> {
    const path = this.basePath + `/users/signup`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    let formParams = new URLSearchParams();

    // verify required parameter 'firstname' is not null or undefined
    if (firstname === null || firstname === undefined) {
      throw new Error(
        "Required parameter firstname was null or undefined when calling usersSignupPost."
      );
    }
    // verify required parameter 'lastname' is not null or undefined
    if (lastname === null || lastname === undefined) {
      throw new Error(
        "Required parameter lastname was null or undefined when calling usersSignupPost."
      );
    }
    // verify required parameter 'email' is not null or undefined
    if (email === null || email === undefined) {
      throw new Error(
        "Required parameter email was null or undefined when calling usersSignupPost."
      );
    }
    // verify required parameter 'password' is not null or undefined
    if (password === null || password === undefined) {
      throw new Error(
        "Required parameter password was null or undefined when calling usersSignupPost."
      );
    }
    // verify required parameter 'role' is not null or undefined
    if (role === null || role === undefined) {
      throw new Error(
        "Required parameter role was null or undefined when calling usersSignupPost."
      );
    }

    headers.set("Content-Type", "application/x-www-form-urlencoded");

    if (firstname !== undefined) {
      formParams.set("firstname", <any>firstname);
    }
    if (lastname !== undefined) {
      formParams.set("lastname", <any>lastname);
    }
    if (email !== undefined) {
      formParams.set("email", <any>email);
    }
    if (password !== undefined) {
      formParams.set("password", <any>password);
    }
    if (role !== undefined) {
      formParams.set("role", <any>role);
    }
    if (invite !== undefined) {
      formParams.set("invite", <any>invite);
    }
    if (apply !== undefined) {
      formParams.set("apply", <any>apply);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Post,
      headers: headers,
      body: formParams.toString(),
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Get the collection of the blocked companies by a user
   *
   * @param userId The user identifier number
   */
  public usersUserIdBlockedGet(
    userId: number,
    extraHttpRequestParams?: any
  ): Observable<models.UserBlocked> {
    const path = this.basePath + `/users/${userId}/blocked`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'userId' is not null or undefined
    if (userId === null || userId === undefined) {
      throw new Error(
        "Required parameter userId was null or undefined when calling usersUserIdBlockedGet."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Remove a company from the list of the blocked companies by a user
   *
   * @param userId The user identifier number
   * @param id The record identifier number
   */
  public usersUserIdBlockedIdDelete(
    userId: number,
    id: number,
    extraHttpRequestParams?: any
  ): Observable<{}> {
    const path = this.basePath + `/users/${userId}/blocked/${id}`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'userId' is not null or undefined
    if (userId === null || userId === undefined) {
      throw new Error(
        "Required parameter userId was null or undefined when calling usersUserIdBlockedIdDelete."
      );
    }
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling usersUserIdBlockedIdDelete."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Delete,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Add a company to the list of the blocked companies by a user
   *
   * @param userId The user identifier number
   * @param id The record identifier number
   */
  public usersUserIdBlockedIdPost(
    userId: number,
    id: number,
    extraHttpRequestParams?: any
  ): Observable<{}> {
    const path = this.basePath + `/users/${userId}/blocked/${id}`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'userId' is not null or undefined
    if (userId === null || userId === undefined) {
      throw new Error(
        "Required parameter userId was null or undefined when calling usersUserIdBlockedIdPost."
      );
    }
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling usersUserIdBlockedIdPost."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Post,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Update the user's 'about me' text
   * @param userId The user id
   * @param about The 'about me' text
   */
  public usersUserIdAboutPut(
    userId: number,
    about: string,
    extraHttpRequestParams?: any
  ): Observable<models.Success> {
    const path = this.basePath + `/users/${userId}/about`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'userId' is not null or undefined
    if (userId === null || userId === undefined) {
      throw new Error(
        "Required parameter userId was null or undefined when calling usersUserIdAboutPut."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    headers.set("Content-Type", "application/json");

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Put,
      headers: headers,
      body: about == null ? "" : JSON.stringify({ about }), // https://github.com/angular/angular/issues/10612
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Update the blocking settings
   *
   * @param userId The user identifier number
   * @param all Should block all companies
   */
  public usersUserIdBlockedPut(
    userId: number,
    all?: models.BlockAll,
    extraHttpRequestParams?: any
  ): Observable<models.Success> {
    const path = this.basePath + `/users/${userId}/blocked`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'userId' is not null or undefined
    if (userId === null || userId === undefined) {
      throw new Error(
        "Required parameter userId was null or undefined when calling usersUserIdBlockedPut."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    headers.set("Content-Type", "application/json");

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Put,
      headers: headers,
      body: all == null ? "" : JSON.stringify(all), // https://github.com/angular/angular/issues/10612
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Update the user&#39;s internal settings
   *
   * @param userId The user identifier number
   * @param settings
   */
  public usersUserIdConfigPut(
    userId: number,
    settings?: models.InternalConfig,
    extraHttpRequestParams?: any
  ): Observable<models.User> {
    const path = this.basePath + `/users/${userId}/config`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'userId' is not null or undefined
    if (userId === null || userId === undefined) {
      throw new Error(
        "Required parameter userId was null or undefined when calling usersUserIdConfigPut."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    headers.set("Content-Type", "application/json");

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Put,
      headers: headers,
      body: settings == null ? "" : JSON.stringify(settings), // https://github.com/angular/angular/issues/10612
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Send request to create user profile PDF file and return md5 token as response
   *
   * @param userId The user identifier number
   * @return {token} MD5 token
   */
  public usersUserIdDownloadPost(
    userId: number,
    extraHttpRequestParams?: any
  ): Observable<models.DownloadLink> {
    const path = this.basePath + `/users/${userId}/download`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    let formParams = new URLSearchParams();

    // verify required parameter 'userId' is not null or undefined
    if (userId === null || userId === undefined) {
      throw new Error(
        "Required parameter userId was null or undefined when calling usersUserIdDownloadPost."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    headers.set("Content-Type", "application/x-www-form-urlencoded");

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Post,
      headers: headers,
      body: formParams.toString(),
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Fetch & force Download PDF file of a user profile
   *
   * @param token MD5 hashed token
   * @return {PDF}
   */
  public usersTokenPDFGet(
    token: string,
    extraHttpRequestParams?: any
  ): Observable<{ _body?: string; url?: string }> {
    const path = this.basePath + `/printable/${token}/pdf`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'userId' is not null or undefined
    if (token === null || token === undefined) {
      throw new Error(
        "Required parameter userId was null or undefined when calling usersTokenPdfGet."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    headers.set("Content-Type", "application/pdf");

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      // search: queryParameters,
      responseType: ResponseContentType.Blob
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Upload new resume file
   *
   * @param file
   */
  public usersUserUploadResumeParsingPost(
    file: File[],
    extraHttpRequestParams?: any
  ): Observable<models.EntityId> {
    const path = this.basePath + `/users/cv`;

    let headers = new Headers(this.defaultHeaders.toJSON());

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.append("X-API-KEY", this.configuration.apiKey);
    }

    let formData: FormData = new FormData();

    if (file !== undefined) {
      console.log(file);
       for (var x = 0; x < file.length; x++) {
          formData.append("file[]", file[x], file[x].name);
        }
      
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Post,
      headers: headers,
      body: formData
    });

    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Get the resume
   *
   * @param userId The user identifier number
   * @param fileType
   */
  public usersUserFetchResumeGet(
    userId: string,
    fileType: string,
    extraHttpRequestParams?: any
  ): Observable<models.EntityId> {
    const path = this.basePath + `/users/${userId}/cv/${fileType}`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'userId' is not null or undefined
    if (userId === null || userId === undefined) {
      throw new Error(
        "Required parameter userId was null or undefined when calling usersUserFetchResumeGet."
      );
    }

    if (fileType === null || fileType === undefined) {
      throw new Error(
        "Required parameter userId was null or undefined when calling usersUserFetchResumeGet."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.append("X-API-KEY", this.configuration.apiKey);
    }

    let contentTypeFileType = "pdf";

    if (fileType == "doc") {
      contentTypeFileType = "msword";
    } else if (fileType == "docx") {
      contentTypeFileType =
        "vnd.openxmlformats-officedocument.wordprocessingml.document";
    } else if (fileType === "rtf") {
      contentTypeFileType = 'rtf';
    }

    headers.set("Content-Type", `application/${contentTypeFileType}`);

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters,
      responseType: ResponseContentType.Blob
    });

    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }
  /**
   * Add a new education place to the user&#39;s profile
   *
   * @param userId The user identifier number
   * @param education
   */
  public usersUserHasResumeGet(
    userId: number,
    extraHttpRequestParams?: any
  ): Observable<models.EntityId> {
    const path = this.basePath + `/users/${userId}/has_cv`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'userId' is not null or undefined
    if (userId === null || userId === undefined) {
      throw new Error(
        "Required parameter userId was null or undefined when calling usersUserIdEducationGet."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.append("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters
    });

    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Report a fault in the user porfile
   * Accessible to the recruiter / manager / admin roles only
   * @param userId The user identifier number
   * @param recruiter
   */
  public usersUserIdFaultsPost(
    userId: number,
    recruiter?: models.FaultReason,
    extraHttpRequestParams?: any
  ): Observable<models.Success> {
    const path = this.basePath + `/users/${userId}/faults`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'userId' is not null or undefined
    if (userId === null || userId === undefined) {
      throw new Error(
        "Required parameter userId was null or undefined when calling usersUserIdFaultsPost."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    headers.set("Content-Type", "application/json");

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Post,
      headers: headers,
      body: recruiter == null ? "" : JSON.stringify(recruiter), // https://github.com/angular/angular/issues/10612
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Get an applicant&#39;s note
   * Accessible to the recruiter / manager / admin roles only and unique per business
   * @param userId The user identifier number
   */
  public usersUserIdNotesGet(
    userId: number,
    extraHttpRequestParams?: any
  ): Observable<string> {
    const path = this.basePath + `/users/${userId}/notes`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'userId' is not null or undefined
    if (userId === null || userId === undefined) {
      throw new Error(
        "Required parameter userId was null or undefined when calling usersUserIdNotesGet."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }
   /**
   * Get an applicant&#39;s note
   * Accessible to the recruiter / manager / admin roles only and unique per business
   * @param userId The user identifier number
   */
  public getInvitationCode(
    inviteCode: string,
    extraHttpRequestParams?: any
  ): Observable<any> {
    const path = this.basePath + `/users/${inviteCode}/invitationEmail`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'userId' is not null or undefined
    if (inviteCode === null || inviteCode === undefined) {
      throw new Error(
        "Required parameter inviteCode was null or undefined when calling invitationEmail."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }
  /**
   * Update an applicant&#39;s note
   * Accessible to the recruiter / manager / admin roles only and unique per business
   * @param userId The user identifier number
   * @param note The note for the user
   */
  public usersUserIdNotesPut(
    userId: number,
    note?: string,
    type?: string,
    extraHttpRequestParams?: any
  ): Observable<Response> {
    const path = this.basePath + `/users/${userId}/notes`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    let formParams = new URLSearchParams();

    // verify required parameter 'userId' is not null or undefined
    if (userId === null || userId === undefined) {
      throw new Error(
        "Required parameter userId was null or undefined when calling usersUserIdNotesPut."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    headers.set("Content-Type", "application/x-www-form-urlencoded");

    if (note !== undefined) {
      formParams.set("note", <any>note);
    }
    if (type !== undefined) {
      formParams.set("type", <any>type);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Put,
      headers: headers,
      body: formParams.toString(),
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Get the user&#39;s status and preferences
   *
   * @param userId The user identifier number
   */
  public usersUserIdPreferencesGet(
    userId: number,
    extraHttpRequestParams?: any
  ): Observable<models.UserPreferences> {
    const path = this.basePath + `/users/${userId}/preferences`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'userId' is not null or undefined
    if (userId === null || userId === undefined) {
      throw new Error(
        "Required parameter userId was null or undefined when calling usersUserIdPreferencesGet."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Update the user&#39;s preferences
   *
   * @param userId The user identifier number
   * @param preferences Prefernces Object
   */
  public usersUserIdPreferencesPut(
    userId: number,
    preferences?: models.UserPreferences,
    extraHttpRequestParams?: any
  ): Observable<models.Success> {
    const path = this.basePath + `/users/${userId}/preferences`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'userId' is not null or undefined
    if (userId === null || userId === undefined) {
      throw new Error(
        "Required parameter userId was null or undefined when calling usersUserIdPreferencesPut."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    headers.set("Content-Type", "application/json");

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Put,
      headers: headers,
      body: preferences == null ? "" : JSON.stringify(preferences), // https://github.com/angular/angular/issues/10612
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Get the profile of the user
   *
   * @param userId The user identifier number
   */
  public usersUserIdProfileGet(
    userId: number,
    showdata: number,
    extraHttpRequestParams?: any
  ): Observable<models.PrivateProfile> {
    const path = this.basePath + `/users/${userId}/profile/${showdata}`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'userId' is not null or undefined
    if (userId === null || userId === undefined) {
      throw new Error(
        "Required parameter userId was null or undefined when calling usersUserIdProfileGet."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Update the profile of the user
   *
   * @param userId The user identifier number
   * @param profile
   */
  public usersUserIdProfilePut(
    userId: number,
    profile?: models.PersonalDetails,
    extraHttpRequestParams?: any
  ): Observable<any> {
    const path = this.basePath + `/users/${userId}/profile`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'userId' is not null or undefined
    if (userId === null || userId === undefined) {
      throw new Error(
        "Required parameter userId was null or undefined when calling usersUserIdProfilePut."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    headers.set("Content-Type", "application/json");

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Put,
      headers: headers,
      body: profile == null ? "" : JSON.stringify(profile), // https://github.com/angular/angular/issues/10612
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Send a contact request to a user
   * Available to unknown / applicant roles only
   * @param userId The user identifier number
   * @param fullname
   * @param company
   * @param email
   * @param phone
   * @param message
   */
  public usersUserIdRequestsPost(
    userId: number,
    fullname: string,
    company: string,
    email: string,
    phone?: string,
    message?: string,
    extraHttpRequestParams?: any
  ): Observable<models.Success> {
    const path = this.basePath + `/users/${userId}/requests`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    let formParams = new URLSearchParams();

    // verify required parameter 'userId' is not null or undefined
    if (userId === null || userId === undefined) {
      throw new Error(
        "Required parameter userId was null or undefined when calling usersUserIdRequestsPost."
      );
    }
    // verify required parameter 'fullname' is not null or undefined
    if (fullname === null || fullname === undefined) {
      throw new Error(
        "Required parameter fullname was null or undefined when calling usersUserIdRequestsPost."
      );
    }
    // verify required parameter 'company' is not null or undefined
    if (company === null || company === undefined) {
      throw new Error(
        "Required parameter company was null or undefined when calling usersUserIdRequestsPost."
      );
    }
    // verify required parameter 'email' is not null or undefined
    if (email === null || email === undefined) {
      throw new Error(
        "Required parameter email was null or undefined when calling usersUserIdRequestsPost."
      );
    }

    headers.set("Content-Type", "application/x-www-form-urlencoded");

    if (fullname !== undefined) {
      formParams.set("fullname", <any>fullname);
    }
    if (company !== undefined) {
      formParams.set("company", <any>company);
    }
    if (phone !== undefined) {
      formParams.set("phone", <any>phone);
    }
    if (email !== undefined) {
      formParams.set("email", <any>email);
    }
    if (message !== undefined) {
      formParams.set("message", <any>message);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Post,
      headers: headers,
      body: formParams.toString(),
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Get the saved searches of the user
   * Accessible to the recruiter / manager / admin roles only
   * @param userId The user identifier number
   */
  public usersUserIdSearchesGet(
    userId: number,
    extraHttpRequestParams?: any
  ): Observable<models.ApplicantsSearchProfileParsed> {
    const path = this.basePath + `/users/${userId}/searches`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'userId' is not null or undefined
    if (userId === null || userId === undefined) {
      throw new Error(
        "Required parameter userId was null or undefined when calling usersUserIdSearchesGet."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Delete a saved search
   * Accessible to the recruiter / manager / admin roles only
   * @param userId The user identifier number
   * @param id The record identifier number
   */
  public usersUserIdSearchesIdDelete(
    userId: number,
    id: number,
    extraHttpRequestParams?: any
  ): Observable<{}> {
    const path = this.basePath + `/users/${userId}/searches/${id}`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'userId' is not null or undefined
    if (userId === null || userId === undefined) {
      throw new Error(
        "Required parameter userId was null or undefined when calling usersUserIdSearchesIdDelete."
      );
    }
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling usersUserIdSearchesIdDelete."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Delete,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Get a saved search profile
   * Accessible to the recruiter / manager / admin roles only
   * @param userId The user identifier number
   * @param id The record identifier number
   */
  public usersUserIdSearchesIdGet(
    userId: number,
    id: number,
    extraHttpRequestParams?: any
  ): Observable<models.ApplicantsSearchProfileParsed> {
    const path = this.basePath + `/users/${userId}/searches/${id}`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'userId' is not null or undefined
    if (userId === null || userId === undefined) {
      throw new Error(
        "Required parameter userId was null or undefined when calling usersUserIdSearchesIdGet."
      );
    }
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling usersUserIdSearchesIdGet."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Create a new saved search
   * Accessible to the recruiter / manager / admin roles only
   * @param userId The user identifier number
   * @param search
   */
  public usersUserIdSearchesPost(
    userId: number,
    search?: models.RecruiterSearchProfile,
    extraHttpRequestParams?: any
  ): Observable<any> {
    const path = this.basePath + `/users/${userId}/searches`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'userId' is not null or undefined
    if (userId === null || userId === undefined) {
      throw new Error(
        "Required parameter userId was null or undefined when calling usersUserIdSearchesPost."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    headers.set("Content-Type", "application/json");

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Post,
      headers: headers,
      body: search == null ? "" : JSON.stringify(search), // https://github.com/angular/angular/issues/10612
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Get the user&#39;s statistics
   *
   * @param userId The user identifier number
   * @param since
   */
  public usersUserIdStatisticsGet(
    userId: number,
    since?: number,
    extraHttpRequestParams?: any
  ): Observable<models.UserStatistics> {
    const path = this.basePath + `/users/${userId}/statistics`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'userId' is not null or undefined
    if (userId === null || userId === undefined) {
      throw new Error(
        "Required parameter userId was null or undefined when calling usersUserIdStatisticsGet."
      );
    }
    if (since !== undefined) {
      queryParameters.set("since", <any>since);
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Adds a view count to a user&#39;s profile
   *
   * @param userId The user identifier number
   * @param userId2
   */
  public usersUserIdStatisticsPost(
    userId: number,
    userId2: number,
    extraHttpRequestParams?: any
  ): Observable<models.Success> {
    const path = this.basePath + `/users/${userId}/statistics`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    let formParams = new URLSearchParams();

    // verify required parameter 'userId' is not null or undefined
    if (userId === null || userId === undefined) {
      throw new Error(
        "Required parameter userId was null or undefined when calling usersUserIdStatisticsPost."
      );
    }
    // verify required parameter 'userId2' is not null or undefined
    if (userId2 === null || userId2 === undefined) {
      throw new Error(
        "Required parameter userId2 was null or undefined when calling usersUserIdStatisticsPost."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    headers.set("Content-Type", "application/x-www-form-urlencoded");

    if (userId2 !== undefined) {
      formParams.set("user_id", <any>userId2);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Post,
      headers: headers,
      body: formParams.toString(),
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Update an applicant&#39;s status
   * Accessible to the recruiter / manager / admin roles only and unique per business
   * @param userId The user identifier number
   * @param status The status of the user
   */
  public usersUserIdStatusPut(
    userId: number,
    status: string,
    extraHttpRequestParams?: any
  ): Observable<{}> {
    const path = this.basePath + `/users/${userId}/status`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    let formParams = new URLSearchParams();

    // verify required parameter 'userId' is not null or undefined
    if (userId === null || userId === undefined) {
      throw new Error(
        "Required parameter userId was null or undefined when calling usersUserIdStatusPut."
      );
    }
    // verify required parameter 'status' is not null or undefined
    if (status === null || status === undefined) {
      throw new Error(
        "Required parameter status was null or undefined when calling usersUserIdStatusPut."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    headers.set("Content-Type", "application/x-www-form-urlencoded");

    if (status !== undefined) {
      formParams.set("status", <any>status);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Put,
      headers: headers,
      body: formParams.toString(),
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Adds a view count to a user&#39;s profile based on IP address
   *
   * @param userId The user identifier number
   */
  public usersUserIdViewsPost(
    userId: number,
    extraHttpRequestParams?: any
  ): Observable<models.Success> {
    const path = this.basePath + `/users/${userId}/views`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'userId' is not null or undefined
    if (userId === null || userId === undefined) {
      throw new Error(
        "Required parameter userId was null or undefined when calling usersUserIdViewsPost."
      );
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Post,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }

  /**
   * Verify the user&#39;s email address
   *
   * @param token Verification token
   */
  public usersVerifyGet(
    token: string,
    extraHttpRequestParams?: any
  ): Observable<models.User> {
    const path = this.basePath + `/users/verify`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'token' is not null or undefined
    if (token === null || token === undefined) {
      throw new Error(
        "Required parameter token was null or undefined when calling usersVerifyGet."
      );
    }
    if (token !== undefined) {
      queryParameters.set("token", <string>token);
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions).map(this.handleResponse);
  }



  // Subscription Services
  
  // GET
  public userSubscriptionGet(
    userId: number
  ): Observable<Response>{
    return this.userSubscriptionGetWithHttpInfo(
      userId
    ).map(this.handleResponse);
  }

  public userSubscriptionGetWithHttpInfo(
    userId: number
  ): Observable<Response> {
    const path = this.basePath + `/users/${userId}/subscription`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'userId' is not null or undefined
    if (userId === null || userId === undefined) {
      throw new Error(
        "Required parameter userId was null or undefined when calling userSubscriptionGet."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }
    headers.set("Content-Type", "application/x-www-form-urlencoded");

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters
    });

    return this.http.request(path, requestOptions);
  }


  //  POST
  public userSubscriptionPost(
    userId: number,
    stripeToken?: string,
    billingName?: string,
    extraHttpRequestParams?: any
  ): Observable<Response> {
    return this.userSubscriptionPostWithHttpInfo(
      userId,
      stripeToken,
      billingName,
      extraHttpRequestParams
    ).map(this.handleResponse);
  }

  public userSubscriptionPostWithHttpInfo(
    userId: number,
    stripeToken?: string,
    billingName?: string,
    extraHttpRequestParams?: any
  ): Observable<Response> {
    const path = this.basePath + `/users/${userId}/subscription`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    let formParams = new URLSearchParams();

    // verify required parameter 'userId' is not null or undefined
    if (userId === null || userId === undefined) {
      throw new Error(
        "Required parameter userId was null or undefined when calling userSubscriptionPost."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    headers.set("Content-Type", "application/x-www-form-urlencoded");

    if (stripeToken !== undefined) {
      formParams.set("stripe_token", <any>stripeToken);
    }

    if (billingName !== undefined) {
      formParams.set("billing_name", <any>billingName);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Post,
      headers: headers,
      body: formParams.toString(),
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }


  // PUT
  public userSubscriptionPut(
    userId: number,
    stripeToken?: string,
    billingName?: string,
    extraHttpRequestParams?: any
  ): Observable<Response> {
    return this.userSubscriptionPutWithHttpInfo(
      userId,
      stripeToken,
      billingName,
      extraHttpRequestParams
    ).map(this.handleResponse);
  }

  public userSubscriptionPutWithHttpInfo(
    userId: number,
    stripeToken?: string,
    billingName?: string,
    extraHttpRequestParams?: any
  ): Observable<Response> {
    const path = this.basePath + `/users/${userId}/subscription`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    let formParams = new URLSearchParams();

    // verify required parameter 'userId' is not null or undefined
    if (userId === null || userId === undefined) {
      throw new Error(
        "Required parameter userId was null or undefined when calling userSubscriptionPost."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    headers.set("Content-Type", "application/x-www-form-urlencoded");

    if (stripeToken !== undefined) {
      formParams.set("stripe_token", <any>stripeToken);
    }

    if (billingName !== undefined) {
      formParams.set("billing_name", <any>billingName);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Put,
      headers: headers,
      body: formParams.toString(),
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }


  // DELETE
  public userSubscriptionDelete(
    userId: number
  ): Observable<Response>{
    return this.userSubscriptionDeleteWithHttpInfo(
      userId
    ).map(this.handleResponse);
  }

  public userSubscriptionDeleteWithHttpInfo(
    userId: number
  ): Observable<Response> {
    const path = this.basePath + `/users/${userId}/subscription`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'userId' is not null or undefined
    if (userId === null || userId === undefined) {
      throw new Error(
        "Required parameter userId was null or undefined when calling userSubscriptionGet."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }
    headers.set("Content-Type", "application/x-www-form-urlencoded");

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Delete,
      headers: headers,
      search: queryParameters
    });

    return this.http.request(path, requestOptions);
  }
    /**
   * get tiny url from tinyurl.com
   *
   * @param token MD5 hashed token
   * @return {formated url}
   */
  public UrlConverTinyUrl(
    userId: number,
    extraHttpRequestParams?: any
    ): Observable<any> {
       const path = this.basePath + `/users/${userId}/converturl`;
      let queryParameters = new URLSearchParams();
      let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
      // verify required parameter 'Url' is not null or undefined
      if (userId === null || userId === undefined) {
        throw new Error(
          "Required parameter user id was null or undefined when calling usersTokenPdfGet."
        );
      }

      // authentication (X-API-KEY) required
      if (this.configuration.apiKey) {
        headers.set("X-API-KEY", this.configuration.apiKey);
      }
      headers.set("Content-Type", "application/x-www-form-urlencoded");
      // headers.set("Content-Type", "text/plain;charset=UTF8");

      let requestOptions: RequestOptionsArgs = new RequestOptions({
        method: RequestMethod.Get,
        headers: headers,
        search: queryParameters,
      });
     return this.http.request(path,requestOptions).map(this.handleResponse);
      //console.log('res',data_res)
      //return data_res;
  }
   // Subscription Services
  
  // GET
  public userPurchesGet(
    userId: number
  ): Observable<any>{
    return this.useruserPurchesGetWithHttpInfo(
      userId
    ).map(this.handleResponse);
  }

  public useruserPurchesGetWithHttpInfo(
    userId: number
  ): Observable<any> {
    const path = this.basePath + `/users/${userId}/purches`;
    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'userId' is not null or undefined
    if (userId === null || userId === undefined) {
      throw new Error(
        "Required parameter userId was null or undefined when calling userSubscriptionGet."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }
    headers.set("Content-Type", "application/x-www-form-urlencoded");

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters
    });

    return this.http.request(path, requestOptions);
  }
}




