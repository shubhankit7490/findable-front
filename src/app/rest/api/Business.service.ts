/**
 * Findable API
 * Findable Restful API Business services
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Inject, Injectable, Optional } from "@angular/core";
import { Http, Headers, URLSearchParams } from "@angular/http";
import {
  RequestMethod,
  RequestOptions,
  RequestOptionsArgs
} from "@angular/http";
import { Response, ResponseContentType } from "@angular/http";

import { Observable } from "rxjs/Observable";
import "rxjs/add/operator/map";

import * as models from "../model/models";
import { environment } from "environments/environment";
import { Configuration } from "../configuration";

/* tslint:disable:no-unused-variable member-ordering */

@Injectable()
export class BusinessApi {
  protected basePath = environment.baseApiPath;
  public defaultHeaders: Headers = new Headers();
  public configuration: Configuration = new Configuration();

  constructor(
    protected http: Http,
    @Optional()
    @Inject(environment.baseApiPath)
    basePath: string,
    @Optional() configuration: Configuration
  ) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
    }
  }

  /**
   *
   * Extends object by coping non-existing properties.
   * @param objA object to be extended
   * @param objB source object
   */
  private extendObj<T1, T2>(objA: T1, objB: T2): T1 & T2 {
    for (let key in objB) {
      if (objB.hasOwnProperty(key)) {
        (<T1 & T2>objA)[key] = (<T1 & T2>objB)[key];
      }
    }
    return <T1 & T2>objA;
  }

  private handleResponse = (response: Response) => {
    if (response.status === 204) {
      return undefined;
    } else {
      return response.json();
    }
  };

  /**
   * Get a collections of business applicant&#39;s profiles
   * Every collection is limited to 50 members
   * @param businessId The business identifier number
   * @param offset
   * @param orderby can be &#39;location&#39; or &#39;jobtitle&#39; or &#39;experience&#39; or &#39;seniority&#39; or &#39;salary&#39;
   * @param order can be &#39;desc&#39; or &#39;asc&#39;
   * @param search
   */
  public businessBusinessIdApplicantsPost(
    businessId: number,
    offset?: number,
    orderby?: string,
    order?: string,
    search?: models.ApplicantsSearchProfile,
    extraHttpRequestParams?: any
  ): Observable<models.ApplicantsSearchResultProfiles> {
    return this.businessBusinessIdApplicantsPostWithHttpInfo(
      businessId,
      offset,
      orderby,
      order,
      search,
      extraHttpRequestParams
    ).map(this.handleResponse);
  }

  /**
   * Apply to a business
   * Limited to applicant role only
   * @param businessId The business identifier number
   */
  public businessBusinessIdApplicationPost(
    businessId: number,
    extraHttpRequestParams?: any
  ): Observable<models.InlineResponse200> {
    return this.businessBusinessIdApplicationPostWithHttpInfo(
      businessId,
      extraHttpRequestParams
    ).map(this.handleResponse);
  }

  /**
   * Get the credits balance of a business
   *
   * @param businessId The business identifier number
   */
  public businessBusinessIdCreditsGet(
    businessId: number,
    extraHttpRequestParams?: any
  ): Observable<models.Credits> {
    return this.businessBusinessIdCreditsGetWithHttpInfo(
      businessId,
      extraHttpRequestParams
    ).map(this.handleResponse);
  }

  /**
   * Purchase credits for a business
   * Accessible to the manager / admin roles only
   * @param businessId The business identifier number
   * @param packageId The id of the requested package
   * @param stripeToken Stripe credit card token. required in the first purchase only.
   * @param billingName The customer&#39;s billing company name
   */
  public businessBusinessIdCreditsPost(
    businessId: number,
    packageId: number,
    stripeToken?: string,
    billingName?: string,
    extraHttpRequestParams?: any
  ): Observable<Response> {
    return this.businessBusinessIdCreditsPostWithHttpInfo(
      businessId,
      packageId,
      stripeToken,
      billingName,
      extraHttpRequestParams
    ).map(this.handleResponse);
  }

  /**
   * Update the credits proccessing settings
   * Accessible to the manager / admin roles only
   * @param businessId The business identifier number
   * @param settings The credits proccessing settings
   */
  public businessBusinessIdCreditsPut(
    businessId: number,
    settings?: models.CreditsSettings,
    extraHttpRequestParams?: any
  ): Observable<{}> {
    return this.businessBusinessIdCreditsPutWithHttpInfo(
      businessId,
      settings,
      extraHttpRequestParams
    ).map(this.handleResponse);
  }

  /**
   * Get information about a business account
   * Limited to admin / manager roles only
   * @param businessId The business identifier number
   */
  public businessBusinessIdGet(
    businessId: number,
    extraHttpRequestParams?: any
  ): Observable<models.BusinessRecord> {
    return this.businessBusinessIdGetWithHttpInfo(
      businessId,
      extraHttpRequestParams
    ).map(this.handleResponse);
  }

  /**
   * Download an invoice of a business purchase
   * Accessible to the manager / admin roles only
   * @param businessId The business identifier number
   * @param id The record identifier number
   */
  public businessBusinessIdInvoiceIdGet(
    businessId: number,
    id: number,
    extraHttpRequestParams?: any
  ): Observable<{}> {
    return this.businessBusinessIdInvoiceIdGetWithHttpInfo(
      businessId,
      id,
      extraHttpRequestParams
    ).map(this.handleResponse);
  }

  /**
   * Get the credits card details of the business.
   * Accessible to the manager / admin roles only
   * @param businessId The business identifier number
   */
  public businessBusinessIdPaymentsGet(
    businessId: number,
    extraHttpRequestParams?: any
  ): Observable<models.PaymentObject> {
    return this.businessBusinessIdPaymentsGetWithHttpInfo(
      businessId,
      extraHttpRequestParams
    ).map(this.handleResponse);
  }

  /**
   * Update the credits card details of the business.
   * Accessible to the manager / admin roles only
   * @param businessId The business identifier number
   * @param id The record identifier number
   * @param token Stripe credit card token
   */
  public businessBusinessIdPaymentsIdPut(
    businessId: number,
    id: number,
    token?: models.StripeToken,
    extraHttpRequestParams?: any
  ): Observable<models.Success> {
    return this.businessBusinessIdPaymentsIdPutWithHttpInfo(
      businessId,
      id,
      token,
      extraHttpRequestParams
    ).map(this.handleResponse);
  }

  /**
   * Get the purchase histroy of a business
   * Accessible to the manager / admin roles only
   * @param businessId The business identifier number
   * @param months
   */
  public businessBusinessIdPurchasesGet(
    businessId: number,
    months: number,
    extraHttpRequestParams?: any
  ): Observable<models.BusinessPurchase[]> {
    return this.businessBusinessIdPurchasesGetWithHttpInfo(
      businessId,
      months,
      extraHttpRequestParams
    ).map(this.handleResponse);
  }

  /**
   * Purchase applciants
   * Accessible to the recruiter / manager / admin roles only
   * @param businessId The business identifier number
   * @param applicants
   */
  public businessBusinessIdPurchasesPost(
    fullname: string,
    company: string,
    message: string,
    recruitingfor:string,
    businessId: number,
    applicants?: models.ApplicantsIds,
    extraHttpRequestParams?: any
  ): Observable<models.PurchasedSuccess> {
    return this.businessBusinessIdPurchasesPostWithHttpInfo(
      fullname,
      company,
      message,
      recruitingfor,
      businessId,
      applicants,
      extraHttpRequestParams
    ).map(this.handleResponse);
  }
   /**
   * chnage uploded business candidate status
   * Accessible to the recruiter / manager / admin roles only
   * @param businessId The business identifier number
   * @param applicants
   */
  public businessBusinessChnageApplicantstatus(
    status:string,
    businessId: number,
    applicants?: models.ApplicantsIds,
    extraHttpRequestParams?: any
  ): Observable<models.PurchasedSuccess> {
    return this.businessBusinessChnageApplicantstatusPostWithHttpInfo(
      status,
      businessId,
      applicants,
      extraHttpRequestParams
    ).map(this.handleResponse);
  }
  /**
   * Update the business record
   * Accessible to the manager role only
   * @param businessId The business identifier number
   * @param business The business details
   */
  public businessBusinessIdPut(
    businessId: number,
    business?: models.Business,
    extraHttpRequestParams?: any
  ): Observable<{}> {
    return this.businessBusinessIdPutWithHttpInfo(
      businessId,
      business,
      extraHttpRequestParams
    ).map(this.handleResponse);
  }

  /**
   * Get a collection of the business recruiters
   * Accessible to the manager / admin roles only
   * @param businessId The business identifier number
   */
  public businessBusinessIdRecruitersGet(
    businessId: number,
    extraHttpRequestParams?: any
  ): Observable<models.Recruiters> {
    return this.businessBusinessIdRecruitersGetWithHttpInfo(
      businessId,
      extraHttpRequestParams
    ).map(this.handleResponse);
  }

  /**
   * Delete a recruiter of a business
   * Accessible to the recruiter / manager / admin roles only
   * @param businessId The business identifier number
   * @param id The record identifier number
   */
  public businessBusinessIdRecruitersIdDelete(
    businessId: number,
    id: number,
    extraHttpRequestParams?: any
  ): Observable<Response> {
    return this.businessBusinessIdRecruitersIdDeleteWithHttpInfo(
      businessId,
      id,
      extraHttpRequestParams
    ).map(this.handleResponse);
  }

  /**
   * Change the credits purchase permission of a recruiter
   * Accessible to the manager / admin roles only
   * @param businessId The business identifier number
   * @param id The record identifier number
   * @param purchasePermission
   */
  public businessBusinessIdRecruitersIdPut(
    businessId: number,
    id: number,
    purchasePermission?: models.PurchasePermissions,
    extraHttpRequestParams?: any
  ): Observable<Response> {
    return this.businessBusinessIdRecruitersIdPutWithHttpInfo(
      businessId,
      id,
      purchasePermission,
      extraHttpRequestParams
    ).map(this.handleResponse);
  }

  /**
   * Add a new recruiter to the business
   * Accessible to the manager / admin roles only
   * @param businessId The business identifier number
   * @param recruiter
   */
  public businessBusinessIdRecruitersPost(
    businessId: number,
    recruiter?: models.NewRecruiter,
    extraHttpRequestParams?: any
  ): Observable<models.Recruiter> {
    return this.businessBusinessIdRecruitersPostWithHttpInfo(
      businessId,
      recruiter,
      extraHttpRequestParams
    ).map(this.handleResponse);
  }

  /**
   * Get results for a certain saved search
   * Accessible to the manager / admin roles only
   * @param businessId The business identifier number
   * @param id The record identifier number
   */
  public businessBusinessIdResultsIdGet(
    businessId: number,
    id: number,
    extraHttpRequestParams?: any
  ): Observable<models.SearchPerformance> {
    return this.businessBusinessIdResultsIdGetWithHttpInfo(
      businessId,
      id,
      extraHttpRequestParams
    ).map(this.handleResponse);
  }

  /**
   * Get the saved searches of the business
   * Accessible to the manager / admin roles only
   * @param businessId The business identifier number
   * @param from
   * @param to
   */
  public businessBusinessIdSearchesGet(
    businessId: number,
    from?: Date,
    to?: Date,
    extraHttpRequestParams?: any
  ): Observable<models.SavedBusinessSearches> {
    return this.businessBusinessIdSearchesGetWithHttpInfo(
      businessId,
      from,
      to,
      extraHttpRequestParams
    ).map(this.handleResponse);
  }

  /**
   * Update the status of a saved search
   * Accessible to the manager / admin roles only
   * @param businessId The business identifier number
   * @param id The record identifier number
   * @param status
   */
  public businessBusinessIdSearchesIdPut(
    businessId: number,
    id: number,
    status?: models.SearchStatus,
    extraHttpRequestParams?: any
  ): Observable<models.Success> {
    return this.businessBusinessIdSearchesIdPutWithHttpInfo(
      businessId,
      id,
      status,
      extraHttpRequestParams
    ).map(this.handleResponse);
  }

  /**
   * Get the statistics of a business
   * Accessible to the manager / admin roles only
   * @param businessId The business identifier number
   */
  public businessBusinessIdStatisticsGet(
    businessId: number,
    extraHttpRequestParams?: any
  ): Observable<models.BusinessStatistics> {
    return this.businessBusinessIdStatisticsGetWithHttpInfo(
      businessId,
      extraHttpRequestParams
    ).map(this.handleResponse);
  }

  /**
   * Upload a business logo image to the platform
   *
   * @param file
   */
  public businessImagesPost(
    file?: any,
    extraHttpRequestParams?: any
  ): Observable<models.ImageRecord> {
    return this.businessImagesPostWithHttpInfo(
      file,
      extraHttpRequestParams
    ).map(this.handleResponse);
  }

  /**
   * Create a new business
   * Accessible to the manager role only
   * @param business The business details
   */
  public businessPost(
    business?: models.Business,
    extraHttpRequestParams?: any
  ): Observable<{ status: boolean; message: number }> {
    return this.businessPostWithHttpInfo(business, extraHttpRequestParams).map(
      this.handleResponse
    );
  }

  /************************************************************************ */

  /**
   * Get a collections of business applicant&#39;s profiles
   * Every collection is limited to 50 members
   * @param businessId The business identifier number
   * @param offset
   * @param orderby can be &#39;location&#39; or &#39;jobtitle&#39; or &#39;experience&#39; or &#39;seniority&#39; or &#39;salary&#39;
   * @param order can be &#39;desc&#39; or &#39;asc&#39;
   * @param search
   */
  public businessBusinessIdApplicantsPostWithHttpInfo(
    businessId: number,
    offset?: number,
    orderby?: string,
    order?: string,
    search?: models.ApplicantsSearchProfile,
    extraHttpRequestParams?: any
  ): Observable<Response> {
    const path = this.basePath + `/business/${businessId}/applicants`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'businessId' is not null or undefined
    if (businessId === null || businessId === undefined) {
      throw new Error(
        "Required parameter businessId was null or undefined when calling businessBusinessIdApplicantsPost."
      );
    }
    if (offset !== undefined) {
      queryParameters.set("offset", <any>offset);
    }
    if (orderby !== undefined) {
      queryParameters.set("orderby", <any>orderby);
    }
    if (order !== undefined) {
      queryParameters.set("order", <any>order);
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    headers.set("Content-Type", "application/json");

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Post,
      headers: headers,
      body: search == null ? "" : JSON.stringify(search), // https://github.com/angular/angular/issues/10612
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Apply to a business
   * Limited to applicant role only
   * @param businessId The business identifier number
   */
  public businessBusinessIdApplicationPostWithHttpInfo(
    businessId: number,
    extraHttpRequestParams?: any
  ): Observable<Response> {
    const path = this.basePath + `/business/${businessId}/application`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'businessId' is not null or undefined
    if (businessId === null || businessId === undefined) {
      throw new Error(
        "Required parameter businessId was null or undefined when calling businessBusinessIdApplicationPost."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Post,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Get the credits balance of a business
   *
   * @param businessId The business identifier number
   */
  public businessBusinessIdCreditsGetWithHttpInfo(
    businessId: number,
    extraHttpRequestParams?: any
  ): Observable<Response> {
    const path = this.basePath + `/business/${businessId}/credits`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'businessId' is not null or undefined
    if (businessId === null || businessId === undefined) {
      throw new Error(
        "Required parameter businessId was null or undefined when calling businessBusinessIdCreditsGet."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Purchase credits for a business
   * Accessible to the manager / admin roles only
   * @param businessId The business identifier number
   * @param packageId The id of the requested package
   * @param stripeToken Stripe credit card token. required in the first purchase only.
   * @param billingName The customer&#39;s billing company name
   */
  public businessBusinessIdCreditsPostWithHttpInfo(
    businessId: number,
    packageId: number,
    stripeToken?: string,
    billingName?: string,
    extraHttpRequestParams?: any
  ): Observable<Response> {
    const path = this.basePath + `/business/${businessId}/credits`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    let formParams = new URLSearchParams();

    // verify required parameter 'businessId' is not null or undefined
    if (businessId === null || businessId === undefined) {
      throw new Error(
        "Required parameter businessId was null or undefined when calling businessBusinessIdCreditsPost."
      );
    }
    // verify required parameter 'packageId' is not null or undefined
    if (packageId === null || packageId === undefined) {
      throw new Error(
        "Required parameter packageId was null or undefined when calling businessBusinessIdCreditsPost."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    headers.set("Content-Type", "application/x-www-form-urlencoded");

    if (stripeToken !== undefined) {
      formParams.set("stripe_token", <any>stripeToken);
    }
    if (packageId !== undefined) {
      formParams.set("package_id", <any>packageId);
    }
    if (billingName !== undefined) {
      formParams.set("billing_name", <any>billingName);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Post,
      headers: headers,
      body: formParams.toString(),
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Update the credits proccessing settings
   * Accessible to the manager / admin roles only
   * @param businessId The business identifier number
   * @param settings The credits proccessing settings
   */
  public businessBusinessIdCreditsPutWithHttpInfo(
    businessId: number,
    settings?: models.CreditsSettings,
    extraHttpRequestParams?: any
  ): Observable<Response> {
    const path = this.basePath + `/business/${businessId}/credits`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'businessId' is not null or undefined
    if (businessId === null || businessId === undefined) {
      throw new Error(
        "Required parameter businessId was null or undefined when calling businessBusinessIdCreditsPut."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    headers.set("Content-Type", "application/json");

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Put,
      headers: headers,
      body: settings == null ? "" : JSON.stringify(settings), // https://github.com/angular/angular/issues/10612
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Get information about a business account
   * Limited to admin / manager roles only
   * @param businessId The business identifier number
   */
  public businessBusinessIdGetWithHttpInfo(
    businessId: number,
    extraHttpRequestParams?: any
  ): Observable<Response> {
    const path = this.basePath + `/business/${businessId}`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'businessId' is not null or undefined
    if (businessId === null || businessId === undefined) {
      throw new Error(
        "Required parameter businessId was null or undefined when calling businessBusinessIdGet."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Download an invoice of a business purchase
   * Accessible to the manager / admin roles only
   * @param businessId The business identifier number
   * @param id The record identifier number
   */
  public businessBusinessIdInvoiceIdGetWithHttpInfo(
    businessId: number,
    id: number,
    extraHttpRequestParams?: any
  ): Observable<Response> {
    const path = this.basePath + `/business/${businessId}/invoice/${id}`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'businessId' is not null or undefined
    if (businessId === null || businessId === undefined) {
      throw new Error(
        "Required parameter businessId was null or undefined when calling businessBusinessIdInvoiceIdGet."
      );
    }
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling businessBusinessIdInvoiceIdGet."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Get the credits card details of the business.
   * Accessible to the manager / admin roles only
   * @param businessId The business identifier number
   */
  public businessBusinessIdPaymentsGetWithHttpInfo(
    businessId: number,
    extraHttpRequestParams?: any
  ): Observable<Response> {
    const path = this.basePath + `/business/${businessId}/payments`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'businessId' is not null or undefined
    if (businessId === null || businessId === undefined) {
      throw new Error(
        "Required parameter businessId was null or undefined when calling businessBusinessIdPaymentsGet."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Update the credits card details of the business.
   * Accessible to the manager / admin roles only
   * @param businessId The business identifier number
   * @param id The record identifier number
   * @param token Stripe credit card token
   */
  public businessBusinessIdPaymentsIdPutWithHttpInfo(
    businessId: number,
    id: number,
    token?: models.StripeToken,
    extraHttpRequestParams?: any
  ): Observable<Response> {
    const path = this.basePath + `/business/${businessId}/payments/${id}`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'businessId' is not null or undefined
    if (businessId === null || businessId === undefined) {
      throw new Error(
        "Required parameter businessId was null or undefined when calling businessBusinessIdPaymentsIdPut."
      );
    }
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling businessBusinessIdPaymentsIdPut."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    headers.set("Content-Type", "application/json");

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Put,
      headers: headers,
      body: token == null ? "" : JSON.stringify(token), // https://github.com/angular/angular/issues/10612
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Get the purchase histroy of a business
   * Accessible to the manager / admin roles only
   * @param businessId The business identifier number
   * @param months
   */
  public businessBusinessIdPurchasesGetWithHttpInfo(
    businessId: number,
    months: number,
    extraHttpRequestParams?: any
  ): Observable<Response> {
    const path = this.basePath + `/business/${businessId}/purchases`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'businessId' is not null or undefined
    if (businessId === null || businessId === undefined) {
      throw new Error(
        "Required parameter businessId was null or undefined when calling businessBusinessIdPurchasesGet."
      );
    }
    // verify required parameter 'months' is not null or undefined
    if (months === null || months === undefined) {
      throw new Error(
        "Required parameter months was null or undefined when calling businessBusinessIdPurchasesGet."
      );
    }
    if (months !== undefined) {
      queryParameters.set("months", <any>months);
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Purchase applciants
   * Accessible to the recruiter / manager / admin roles only
   * @param businessId The business identifier number
   * @param applicants
   */
  public businessBusinessIdPurchasesPostWithHttpInfo(
    fullname: string,
    company: string,
    message: string,
    recruitingfor:string,
    businessId: number,
    applicants?: models.ApplicantsIds,
    extraHttpRequestParams?: any
  ): Observable<Response> {
    const path = this.basePath + `/business/${businessId}/purchases`;

    let queryParameters = new URLSearchParams();
    let  formParams = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'businessId' is not null or undefined
    if (businessId === null || businessId === undefined) {
      throw new Error(
        "Required parameter businessId was null or undefined when calling businessBusinessIdPurchasesPost."
      );
    }
    headers.set("Content-Type", "application/x-www-form-urlencoded");
    if (fullname !== undefined) {
      formParams.set("fullname",<any>fullname);
    }
    if (company !== undefined) {
       formParams.set("company",<any>company);
    }
    if (message !== undefined) {
       formParams.set("message",<any>message);
    }
    if (recruitingfor !== undefined) {
       formParams.set("recruitingfor",<any>recruitingfor);
    }
    if (applicants !== undefined) {
       formParams.set("applicants",<any>JSON.stringify(applicants));
    }
    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }
    //headers.set("Content-Type", "application/json");

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Post,
      headers: headers,
      body: formParams.toString(), // https://github.com/angular/angular/issues/10612
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }
   /**
   * Chnage applicant status
   * Accessible to the recruiter / manager / admin roles only
   * @param businessId The business identifier number
   * @param applicants
   */
  public businessBusinessChnageApplicantstatusPostWithHttpInfo(
    status:string,
    businessId: number,
    applicants?: models.ApplicantsIds,
    extraHttpRequestParams?: any
  ): Observable<Response> {
    const path = this.basePath + `/business/${businessId}/updateapplicantstatus`;

    let queryParameters = new URLSearchParams();
    let  formParams = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'businessId' is not null or undefined
    if (businessId === null || businessId === undefined) {
      throw new Error(
        "Required parameter businessId was null or undefined when calling businessBusinessChnageApplicantstatusPostWithHttpInfo."
      );
    }
    headers.set("Content-Type", "application/x-www-form-urlencoded");
    if (applicants !== undefined) {
       formParams.set("applicants",<any>JSON.stringify(applicants));
    }
    if (status !== undefined) {
       formParams.set("status",<any>status);
    }
    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }
    //headers.set("Content-Type", "application/json");

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Post,
      headers: headers,
      body: formParams.toString(), // https://github.com/angular/angular/issues/10612
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }
  /**
   * Update the business record
   * Accessible to the manager role only
   * @param businessId The business identifier number
   * @param business The business details
   */
  public businessBusinessIdPutWithHttpInfo(
    businessId: number,
    business?: models.Business,
    extraHttpRequestParams?: any
  ): Observable<Response> {
    const path = this.basePath + `/business/${businessId}`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'businessId' is not null or undefined
    if (businessId === null || businessId === undefined) {
      throw new Error(
        "Required parameter businessId was null or undefined when calling businessBusinessIdPut."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    headers.set("Content-Type", "application/json");

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Put,
      headers: headers,
      body: business == null ? "" : JSON.stringify(business), // https://github.com/angular/angular/issues/10612
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Get a collection of the business recruiters
   * Accessible to the manager / admin roles only
   * @param businessId The business identifier number
   */
  public businessBusinessIdRecruitersGetWithHttpInfo(
    businessId: number,
    extraHttpRequestParams?: any
  ): Observable<Response> {
    const path = this.basePath + `/business/${businessId}/recruiters`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'businessId' is not null or undefined
    if (businessId === null || businessId === undefined) {
      throw new Error(
        "Required parameter businessId was null or undefined when calling businessBusinessIdRecruitersGet."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Delete a recruiter of a business
   * Accessible to the recruiter / manager / admin roles only
   * @param businessId The business identifier number
   * @param id The record identifier number
   */
  public businessBusinessIdRecruitersIdDeleteWithHttpInfo(
    businessId: number,
    id: number,
    extraHttpRequestParams?: any
  ): Observable<Response> {
    const path = this.basePath + `/business/${businessId}/recruiters/${id}`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'businessId' is not null or undefined
    if (businessId === null || businessId === undefined) {
      throw new Error(
        "Required parameter businessId was null or undefined when calling businessBusinessIdRecruitersIdDelete."
      );
    }
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling businessBusinessIdRecruitersIdDelete."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Delete,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Change the credits purchase permission of a recruiter
   * Accessible to the manager / admin roles only
   * @param businessId The business identifier number
   * @param id The record identifier number
   * @param purchasePermission
   */
  public businessBusinessIdRecruitersIdPutWithHttpInfo(
    businessId: number,
    id: number,
    purchasePermission?: models.PurchasePermissions,
    extraHttpRequestParams?: any
  ): Observable<Response> {
    const path = this.basePath + `/business/${businessId}/recruiters/${id}`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'businessId' is not null or undefined
    if (businessId === null || businessId === undefined) {
      throw new Error(
        "Required parameter businessId was null or undefined when calling businessBusinessIdRecruitersIdPut."
      );
    }
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling businessBusinessIdRecruitersIdPut."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    headers.set("Content-Type", "application/json");

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Put,
      headers: headers,
      body:
        purchasePermission == null ? "" : JSON.stringify(purchasePermission), // https://github.com/angular/angular/issues/10612
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Add a new recruiter to the business
   * Accessible to the manager / admin roles only
   * @param businessId The business identifier number
   * @param recruiter
   */
  public businessBusinessIdRecruitersPostWithHttpInfo(
    businessId: number,
    recruiter?: models.NewRecruiter,
    extraHttpRequestParams?: any
  ): Observable<Response> {
    const path = this.basePath + `/business/${businessId}/recruiters`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'businessId' is not null or undefined
    if (businessId === null || businessId === undefined) {
      throw new Error(
        "Required parameter businessId was null or undefined when calling businessBusinessIdRecruitersPost."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    headers.set("Content-Type", "application/json");

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Post,
      headers: headers,
      body: recruiter == null ? "" : JSON.stringify(recruiter), // https://github.com/angular/angular/issues/10612
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Get results for a certain saved search
   * Accessible to the manager / admin roles only
   * @param businessId The business identifier number
   * @param id The record identifier number
   */
  public businessBusinessIdResultsIdGetWithHttpInfo(
    businessId: number,
    id: number,
    extraHttpRequestParams?: any
  ): Observable<Response> {
    const path = this.basePath + `/business/${businessId}/results/${id}`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'businessId' is not null or undefined
    if (businessId === null || businessId === undefined) {
      throw new Error(
        "Required parameter businessId was null or undefined when calling businessBusinessIdResultsIdGet."
      );
    }
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling businessBusinessIdResultsIdGet."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Get the saved searches of the business
   * Accessible to the manager / admin roles only
   * @param businessId The business identifier number
   * @param from
   * @param to
   */
  public businessBusinessIdSearchesGetWithHttpInfo(
    businessId: number,
    from?: Date,
    to?: Date,
    extraHttpRequestParams?: any
  ): Observable<Response> {
    const path = this.basePath + `/business/${businessId}/searches`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'businessId' is not null or undefined
    if (businessId === null || businessId === undefined) {
      throw new Error(
        "Required parameter businessId was null or undefined when calling businessBusinessIdSearchesGet."
      );
    }
    if (from !== undefined) {
      queryParameters.set("from", <any>from);
    }
    if (to !== undefined) {
      queryParameters.set("to", <any>to);
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Update the status of a saved search
   * Accessible to the manager / admin roles only
   * @param businessId The business identifier number
   * @param id The record identifier number
   * @param status
   */
  public businessBusinessIdSearchesIdPutWithHttpInfo(
    businessId: number,
    id: number,
    status?: models.SearchStatus,
    extraHttpRequestParams?: any
  ): Observable<Response> {
    const path = this.basePath + `/business/${businessId}/searches/${id}`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'businessId' is not null or undefined
    if (businessId === null || businessId === undefined) {
      throw new Error(
        "Required parameter businessId was null or undefined when calling businessBusinessIdSearchesIdPut."
      );
    }
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling businessBusinessIdSearchesIdPut."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    headers.set("Content-Type", "application/json");

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Put,
      headers: headers,
      body: status == null ? "" : JSON.stringify(status), // https://github.com/angular/angular/issues/10612
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Get the statistics of a business
   * Accessible to the manager / admin roles only
   * @param businessId The business identifier number
   */
  public businessBusinessIdStatisticsGetWithHttpInfo(
    businessId: number,
    extraHttpRequestParams?: any
  ): Observable<Response> {
    const path = this.basePath + `/business/${businessId}/statistics`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'businessId' is not null or undefined
    if (businessId === null || businessId === undefined) {
      throw new Error(
        "Required parameter businessId was null or undefined when calling businessBusinessIdStatisticsGet."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Upload a business logo image to the platform
   *
   * @param file
   */
  public businessImagesPostWithHttpInfo(
    file?: any,
    extraHttpRequestParams?: any
  ): Observable<Response> {
    const path = this.basePath + `/business/images`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    let formParams = new URLSearchParams();

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    headers.set("Content-Type", "application/x-www-form-urlencoded");

    if (file !== undefined) {
      formParams.set("file", <any>file);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Post,
      headers: headers,
      body: formParams.toString(),
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Create a new business
   * Accessible to the manager role only
   * @param business The business details
   */
  public businessPostWithHttpInfo(
    business?: models.Business,
    extraHttpRequestParams?: any
  ): Observable<Response> {
    const path = this.basePath + `/business`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    headers.set("Content-Type", "application/json");

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Post,
      headers: headers,
      body: business == null ? "" : JSON.stringify(business), // https://github.com/angular/angular/issues/10612
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }
}
