/**
 * Findable API
 * Findable Restful API Educations services
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Inject, Injectable, Optional } from "@angular/core";
import { Http, Headers, URLSearchParams } from "@angular/http";
import {
  RequestMethod,
  RequestOptions,
  RequestOptionsArgs
} from "@angular/http";
import { Response, ResponseContentType } from "@angular/http";

import { Observable } from "rxjs/Observable";
import "rxjs/add/operator/map";

import * as models from "../model/models";
import { environment } from "environments/environment";
import { Configuration } from "../configuration";

/* tslint:disable:no-unused-variable member-ordering */

@Injectable()
export class EducationsApi {
  protected basePath = environment.baseApiPath;
  public defaultHeaders: Headers = new Headers();
  public configuration: Configuration = new Configuration();

  constructor(
    protected http: Http,
    @Optional()
    @Inject(environment.baseApiPath)
    basePath: string,
    @Optional() configuration: Configuration
  ) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
    }
  }

  /**
   *
   * Extends object by coping non-existing properties.
   * @param objA object to be extended
   * @param objB source object
   */
  private extendObj<T1, T2>(objA: T1, objB: T2): T1 & T2 {
    for (let key in objB) {
      if (objB.hasOwnProperty(key)) {
        (<T1 & T2>objA)[key] = (<T1 & T2>objB)[key];
      }
    }
    return <T1 & T2>objA;
  }

  private handleResponse = (response: Response) => {
    if (response.status === 204) {
      return undefined;
    } else {
      return response.json();
    }
  };

  /**
   * Get the user&#39;s education places
   *
   * @param userId The user identifier number
   */
  public usersUserIdEducationGet(
    userId: number,
    extraHttpRequestParams?: any
  ): Observable<models.ExistingEducations> {
    return this.usersUserIdEducationGetWithHttpInfo(
      userId,
      extraHttpRequestParams
    ).map(this.handleResponse);
  }

  /**
   * Remove an education place from the user&#39;s profile
   *
   * @param userId The user identifier number
   * @param id The record identifier number
   */
  public usersUserIdEducationIdDelete(
    userId: number,
    id: number,
    extraHttpRequestParams?: any
  ): Observable<{}> {
    return this.usersUserIdEducationIdDeleteWithHttpInfo(
      userId,
      id,
      extraHttpRequestParams
    ).map(this.handleResponse);
  }

  /**
   * Update an education place from the user&#39;s profile
   *
   * @param userId The user identifier number
   * @param id The record identifier number
   * @param education
   */
  public usersUserIdEducationIdPut(
    userId: number,
    id: number,
    education: models.Education,
    extraHttpRequestParams?: any
  ): Observable<{}> {
    return this.usersUserIdEducationIdPutWithHttpInfo(
      userId,
      id,
      education,
      extraHttpRequestParams
    ).map(this.handleResponse);
  }

  /**
   * Add a new education place to the user&#39;s profile
   *
   * @param userId The user identifier number
   * @param education
   */
  public usersUserIdEducationPost(
    userId: number,
    education: models.Education,
    extraHttpRequestParams?: any
  ): Observable<models.EntityId> {
    return this.usersUserIdEducationPostWithHttpInfo(
      userId,
      education,
      extraHttpRequestParams
    ).map(this.handleResponse);
  }

  /**
   * Get the user&#39;s education places
   *
   * @param userId The user identifier number
   */
  public usersUserIdEducationGetWithHttpInfo(
    userId: number,
    extraHttpRequestParams?: any
  ): Observable<Response> {
    const path = this.basePath + `/users/${userId}/education`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'userId' is not null or undefined
    if (userId === null || userId === undefined) {
      throw new Error(
        "Required parameter userId was null or undefined when calling usersUserIdEducationGet."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Remove an education place from the user&#39;s profile
   *
   * @param userId The user identifier number
   * @param id The record identifier number
   */
  public usersUserIdEducationIdDeleteWithHttpInfo(
    userId: number,
    id: number,
    extraHttpRequestParams?: any
  ): Observable<Response> {
    const path = this.basePath + `/users/${userId}/education/${id}`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'userId' is not null or undefined
    if (userId === null || userId === undefined) {
      throw new Error(
        "Required parameter userId was null or undefined when calling usersUserIdEducationIdDelete."
      );
    }
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling usersUserIdEducationIdDelete."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Delete,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Update an education place from the user&#39;s profile
   *
   * @param userId The user identifier number
   * @param id The record identifier number
   * @param education
   */
  public usersUserIdEducationIdPutWithHttpInfo(
    userId: number,
    id: number,
    education: models.Education,
    extraHttpRequestParams?: any
  ): Observable<Response> {
    const path = this.basePath + `/users/${userId}/education/${id}`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'userId' is not null or undefined
    if (userId === null || userId === undefined) {
      throw new Error(
        "Required parameter userId was null or undefined when calling usersUserIdEducationIdPut."
      );
    }
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling usersUserIdEducationIdPut."
      );
    }
    // verify required parameter 'education' is not null or undefined
    if (education === null || education === undefined) {
      throw new Error(
        "Required parameter education was null or undefined when calling usersUserIdEducationIdPut."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    headers.set("Content-Type", "application/json");

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Put,
      headers: headers,
      body: education == null ? "" : JSON.stringify(education), // https://github.com/angular/angular/issues/10612
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Add a new education place to the user&#39;s profile
   *
   * @param userId The user identifier number
   * @param education
   */
  public usersUserIdEducationPostWithHttpInfo(
    userId: number,
    education: models.Education,
    extraHttpRequestParams?: any
  ): Observable<Response> {
    const path = this.basePath + `/users/${userId}/education`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'userId' is not null or undefined
    if (userId === null || userId === undefined) {
      throw new Error(
        "Required parameter userId was null or undefined when calling usersUserIdEducationPost."
      );
    }
    // verify required parameter 'education' is not null or undefined
    if (education === null || education === undefined) {
      throw new Error(
        "Required parameter education was null or undefined when calling usersUserIdEducationPost."
      );
    }

    // authentication (X-API-KEY) required
    if (this.configuration.apiKey) {
      headers.set("X-API-KEY", this.configuration.apiKey);
    }

    headers.set("Content-Type", "application/json");

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Post,
      headers: headers,
      body: education == null ? "" : JSON.stringify(education), // https://github.com/angular/angular/issues/10612
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }


}